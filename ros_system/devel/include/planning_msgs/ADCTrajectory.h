// Generated by gencpp from file planning_msgs/ADCTrajectory.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_ADCTRAJECTORY_H
#define PLANNING_MSGS_MESSAGE_ADCTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <planning_msgs/PathPoint.h>
#include <planning_msgs/LatencyStats.h>
#include <planning_msgs/PredictionDebug.h>

namespace planning_msgs
{
template <class ContainerAllocator>
struct ADCTrajectory_
{
  typedef ADCTrajectory_<ContainerAllocator> Type;

  ADCTrajectory_()
    : header()
    , path_point()
    , dis_to_end(0.0)
    , dis_to_cip(0.0)
    , estop(false)
    , is_replan(false)
    , gear_position(0)
    , turn_signal(0)
    , latency_stats()
    , predict_debug()  {
    }
  ADCTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , path_point(_alloc)
    , dis_to_end(0.0)
    , dis_to_cip(0.0)
    , estop(false)
    , is_replan(false)
    , gear_position(0)
    , turn_signal(0)
    , latency_stats(_alloc)
    , predict_debug(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::planning_msgs::PathPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::planning_msgs::PathPoint_<ContainerAllocator> >::other >  _path_point_type;
  _path_point_type path_point;

   typedef float _dis_to_end_type;
  _dis_to_end_type dis_to_end;

   typedef float _dis_to_cip_type;
  _dis_to_cip_type dis_to_cip;

   typedef uint8_t _estop_type;
  _estop_type estop;

   typedef uint8_t _is_replan_type;
  _is_replan_type is_replan;

   typedef uint8_t _gear_position_type;
  _gear_position_type gear_position;

   typedef uint8_t _turn_signal_type;
  _turn_signal_type turn_signal;

   typedef  ::planning_msgs::LatencyStats_<ContainerAllocator>  _latency_stats_type;
  _latency_stats_type latency_stats;

   typedef  ::planning_msgs::PredictionDebug_<ContainerAllocator>  _predict_debug_type;
  _predict_debug_type predict_debug;



  enum {
    GEAR_NEUTRAL = 0u,
    GEAR_DRIVE = 1u,
    GEAR_REVERSE = 2u,
    GEAR_PARKING = 3u,
    GEAR_INVALID = 4u,
    TURN_NONE = 0u,
    TURN_LEFT = 1u,
    TURN_RIGHT = 2u,
  };


  typedef boost::shared_ptr< ::planning_msgs::ADCTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::ADCTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct ADCTrajectory_

typedef ::planning_msgs::ADCTrajectory_<std::allocator<void> > ADCTrajectory;

typedef boost::shared_ptr< ::planning_msgs::ADCTrajectory > ADCTrajectoryPtr;
typedef boost::shared_ptr< ::planning_msgs::ADCTrajectory const> ADCTrajectoryConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::ADCTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6c0f4e599aa65a91923e94a4414cf84";
  }

  static const char* value(const ::planning_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6c0f4e599aa65a9ULL;
  static const uint64_t static_value2 = 0x1923e94a4414cf84ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/ADCTrajectory";
  }

  static const char* value(const ::planning_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
PathPoint[] path_point\n\
float32 dis_to_end\n\
float32 dis_to_cip\n\
bool estop\n\
bool is_replan\n\
uint8 gear_position\n\
uint8 turn_signal\n\
LatencyStats latency_stats\n\
PredictionDebug predict_debug\n\
\n\
# Gear Position\n\
uint8 GEAR_NEUTRAL=0\n\
uint8 GEAR_DRIVE=1\n\
uint8 GEAR_REVERSE=2\n\
uint8 GEAR_PARKING=3\n\
uint8 GEAR_INVALID=4\n\
\n\
# turn signal state\n\
uint8 TURN_NONE=0\n\
uint8 TURN_LEFT=1\n\
uint8 TURN_RIGHT=2\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: planning_msgs/PathPoint\n\
float64 time\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 theta\n\
float64 curvature\n\
float64 curv_rate\n\
float32 velocity \n\
float32 acceleration \n\
float32 s\n\
float32 l\n\
\n\
================================================================================\n\
MSG: planning_msgs/LatencyStats\n\
float64 total_time_ms\n\
float64 init_frame_time_ms\n\
\n\
================================================================================\n\
MSG: planning_msgs/PredictionDebug\n\
Propt[32] propt\n\
ObstaclePred[64] obstacle_pred\n\
GlobalObstacle[32] obstacle_glbl\n\
\n\
================================================================================\n\
MSG: planning_msgs/Propt\n\
float32 frenet_l\n\
float32 frenet_s\n\
float32 angle_diff\n\
\n\
================================================================================\n\
MSG: planning_msgs/ObstaclePred\n\
float32[10] prediction_x\n\
float32[10] prediction_y\n\
uint32 predict_method\n\
bool is_valid\n\
\n\
================================================================================\n\
MSG: planning_msgs/GlobalObstacle\n\
float32 enu_x\n\
float32 enu_y\n\
float32 enu_theta\n\
float32 enu_vx\n\
float32 enu_vy\n\
float32 enu_ax\n\
float32 enu_ay\n\
float32 confidence\n\
int8 type\n\
float32 velocity\n\
float32 length\n\
float32 width\n\
";
  }

  static const char* value(const ::planning_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.path_point);
      stream.next(m.dis_to_end);
      stream.next(m.dis_to_cip);
      stream.next(m.estop);
      stream.next(m.is_replan);
      stream.next(m.gear_position);
      stream.next(m.turn_signal);
      stream.next(m.latency_stats);
      stream.next(m.predict_debug);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::ADCTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::ADCTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "path_point[]" << std::endl;
    for (size_t i = 0; i < v.path_point.size(); ++i)
    {
      s << indent << "  path_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning_msgs::PathPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.path_point[i]);
    }
    s << indent << "dis_to_end: ";
    Printer<float>::stream(s, indent + "  ", v.dis_to_end);
    s << indent << "dis_to_cip: ";
    Printer<float>::stream(s, indent + "  ", v.dis_to_cip);
    s << indent << "estop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estop);
    s << indent << "is_replan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_replan);
    s << indent << "gear_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_position);
    s << indent << "turn_signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_signal);
    s << indent << "latency_stats: ";
    s << std::endl;
    Printer< ::planning_msgs::LatencyStats_<ContainerAllocator> >::stream(s, indent + "  ", v.latency_stats);
    s << indent << "predict_debug: ";
    s << std::endl;
    Printer< ::planning_msgs::PredictionDebug_<ContainerAllocator> >::stream(s, indent + "  ", v.predict_debug);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_ADCTRAJECTORY_H
