// Generated by gencpp from file planning_msgs/StitchDebug.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_STITCHDEBUG_H
#define PLANNING_MSGS_MESSAGE_STITCHDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning_msgs
{
template <class ContainerAllocator>
struct StitchDebug_
{
  typedef StitchDebug_<ContainerAllocator> Type;

  StitchDebug_()
    : prev_traj_is_not_ok(false)
    , driver_mode_is_not_auto(false)
    , prev_traj_size_is_zero(false)
    , smaller_than_prev_traj_time(false)
    , beyond_prev_traj_time(false)
    , dist_too_large(false)
    , lon_diff(0.0)
    , lat_diff(0.0)  {
    }
  StitchDebug_(const ContainerAllocator& _alloc)
    : prev_traj_is_not_ok(false)
    , driver_mode_is_not_auto(false)
    , prev_traj_size_is_zero(false)
    , smaller_than_prev_traj_time(false)
    , beyond_prev_traj_time(false)
    , dist_too_large(false)
    , lon_diff(0.0)
    , lat_diff(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _prev_traj_is_not_ok_type;
  _prev_traj_is_not_ok_type prev_traj_is_not_ok;

   typedef uint8_t _driver_mode_is_not_auto_type;
  _driver_mode_is_not_auto_type driver_mode_is_not_auto;

   typedef uint8_t _prev_traj_size_is_zero_type;
  _prev_traj_size_is_zero_type prev_traj_size_is_zero;

   typedef uint8_t _smaller_than_prev_traj_time_type;
  _smaller_than_prev_traj_time_type smaller_than_prev_traj_time;

   typedef uint8_t _beyond_prev_traj_time_type;
  _beyond_prev_traj_time_type beyond_prev_traj_time;

   typedef uint8_t _dist_too_large_type;
  _dist_too_large_type dist_too_large;

   typedef float _lon_diff_type;
  _lon_diff_type lon_diff;

   typedef float _lat_diff_type;
  _lat_diff_type lat_diff;





  typedef boost::shared_ptr< ::planning_msgs::StitchDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::StitchDebug_<ContainerAllocator> const> ConstPtr;

}; // struct StitchDebug_

typedef ::planning_msgs::StitchDebug_<std::allocator<void> > StitchDebug;

typedef boost::shared_ptr< ::planning_msgs::StitchDebug > StitchDebugPtr;
typedef boost::shared_ptr< ::planning_msgs::StitchDebug const> StitchDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::StitchDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::StitchDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::StitchDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::StitchDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::StitchDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::StitchDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::StitchDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::StitchDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::StitchDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbce74fa73b1745ccd5e3c75b3d544b6";
  }

  static const char* value(const ::planning_msgs::StitchDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbce74fa73b1745cULL;
  static const uint64_t static_value2 = 0xcd5e3c75b3d544b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::StitchDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/StitchDebug";
  }

  static const char* value(const ::planning_msgs::StitchDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::StitchDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  bool prev_traj_is_not_ok\n\
  bool driver_mode_is_not_auto\n\
  bool prev_traj_size_is_zero\n\
  bool smaller_than_prev_traj_time\n\
  bool beyond_prev_traj_time\n\
  bool dist_too_large\n\
  float32 lon_diff\n\
  float32 lat_diff\n\
";
  }

  static const char* value(const ::planning_msgs::StitchDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::StitchDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prev_traj_is_not_ok);
      stream.next(m.driver_mode_is_not_auto);
      stream.next(m.prev_traj_size_is_zero);
      stream.next(m.smaller_than_prev_traj_time);
      stream.next(m.beyond_prev_traj_time);
      stream.next(m.dist_too_large);
      stream.next(m.lon_diff);
      stream.next(m.lat_diff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StitchDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::StitchDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::StitchDebug_<ContainerAllocator>& v)
  {
    s << indent << "prev_traj_is_not_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.prev_traj_is_not_ok);
    s << indent << "driver_mode_is_not_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driver_mode_is_not_auto);
    s << indent << "prev_traj_size_is_zero: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.prev_traj_size_is_zero);
    s << indent << "smaller_than_prev_traj_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.smaller_than_prev_traj_time);
    s << indent << "beyond_prev_traj_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beyond_prev_traj_time);
    s << indent << "dist_too_large: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dist_too_large);
    s << indent << "lon_diff: ";
    Printer<float>::stream(s, indent + "  ", v.lon_diff);
    s << indent << "lat_diff: ";
    Printer<float>::stream(s, indent + "  ", v.lat_diff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_STITCHDEBUG_H
