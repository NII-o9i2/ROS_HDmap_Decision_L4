// Generated by gencpp from file planning_msgs/GlobalObstacle.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_GLOBALOBSTACLE_H
#define PLANNING_MSGS_MESSAGE_GLOBALOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning_msgs
{
template <class ContainerAllocator>
struct GlobalObstacle_
{
  typedef GlobalObstacle_<ContainerAllocator> Type;

  GlobalObstacle_()
    : enu_x(0.0)
    , enu_y(0.0)
    , enu_theta(0.0)
    , enu_vx(0.0)
    , enu_vy(0.0)
    , enu_ax(0.0)
    , enu_ay(0.0)
    , confidence(0.0)
    , type(0)
    , velocity(0.0)
    , length(0.0)
    , width(0.0)  {
    }
  GlobalObstacle_(const ContainerAllocator& _alloc)
    : enu_x(0.0)
    , enu_y(0.0)
    , enu_theta(0.0)
    , enu_vx(0.0)
    , enu_vy(0.0)
    , enu_ax(0.0)
    , enu_ay(0.0)
    , confidence(0.0)
    , type(0)
    , velocity(0.0)
    , length(0.0)
    , width(0.0)  {
  (void)_alloc;
    }



   typedef float _enu_x_type;
  _enu_x_type enu_x;

   typedef float _enu_y_type;
  _enu_y_type enu_y;

   typedef float _enu_theta_type;
  _enu_theta_type enu_theta;

   typedef float _enu_vx_type;
  _enu_vx_type enu_vx;

   typedef float _enu_vy_type;
  _enu_vy_type enu_vy;

   typedef float _enu_ax_type;
  _enu_ax_type enu_ax;

   typedef float _enu_ay_type;
  _enu_ay_type enu_ay;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int8_t _type_type;
  _type_type type;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::planning_msgs::GlobalObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::GlobalObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalObstacle_

typedef ::planning_msgs::GlobalObstacle_<std::allocator<void> > GlobalObstacle;

typedef boost::shared_ptr< ::planning_msgs::GlobalObstacle > GlobalObstaclePtr;
typedef boost::shared_ptr< ::planning_msgs::GlobalObstacle const> GlobalObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::GlobalObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::GlobalObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::GlobalObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::GlobalObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7d3afddcf69de81cf0f9f41ad80e5fa";
  }

  static const char* value(const ::planning_msgs::GlobalObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7d3afddcf69de81ULL;
  static const uint64_t static_value2 = 0xcf0f9f41ad80e5faULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/GlobalObstacle";
  }

  static const char* value(const ::planning_msgs::GlobalObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 enu_x\n\
float32 enu_y\n\
float32 enu_theta\n\
float32 enu_vx\n\
float32 enu_vy\n\
float32 enu_ax\n\
float32 enu_ay\n\
float32 confidence\n\
int8 type\n\
float32 velocity\n\
float32 length\n\
float32 width\n\
";
  }

  static const char* value(const ::planning_msgs::GlobalObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enu_x);
      stream.next(m.enu_y);
      stream.next(m.enu_theta);
      stream.next(m.enu_vx);
      stream.next(m.enu_vy);
      stream.next(m.enu_ax);
      stream.next(m.enu_ay);
      stream.next(m.confidence);
      stream.next(m.type);
      stream.next(m.velocity);
      stream.next(m.length);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::GlobalObstacle_<ContainerAllocator>& v)
  {
    s << indent << "enu_x: ";
    Printer<float>::stream(s, indent + "  ", v.enu_x);
    s << indent << "enu_y: ";
    Printer<float>::stream(s, indent + "  ", v.enu_y);
    s << indent << "enu_theta: ";
    Printer<float>::stream(s, indent + "  ", v.enu_theta);
    s << indent << "enu_vx: ";
    Printer<float>::stream(s, indent + "  ", v.enu_vx);
    s << indent << "enu_vy: ";
    Printer<float>::stream(s, indent + "  ", v.enu_vy);
    s << indent << "enu_ax: ";
    Printer<float>::stream(s, indent + "  ", v.enu_ax);
    s << indent << "enu_ay: ";
    Printer<float>::stream(s, indent + "  ", v.enu_ay);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_GLOBALOBSTACLE_H
