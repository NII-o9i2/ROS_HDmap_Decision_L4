// Generated by gencpp from file planning_msgs/ObstacleIn.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_OBSTACLEIN_H
#define PLANNING_MSGS_MESSAGE_OBSTACLEIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning_msgs
{
template <class ContainerAllocator>
struct ObstacleIn_
{
  typedef ObstacleIn_<ContainerAllocator> Type;

  ObstacleIn_()
    : id(0)
    , s(0.0)
    , l(0.0)
    , vs(0.0)
    , as(0.0)
    , vl(0.0)
    , al(0.0)
    , lane_no(0)
    , time_cost(0.0)
    , des_cost(0.0)
    , decision_cost(0.0)
    , decision_tag(0)  {
    }
  ObstacleIn_(const ContainerAllocator& _alloc)
    : id(0)
    , s(0.0)
    , l(0.0)
    , vs(0.0)
    , as(0.0)
    , vl(0.0)
    , al(0.0)
    , lane_no(0)
    , time_cost(0.0)
    , des_cost(0.0)
    , decision_cost(0.0)
    , decision_tag(0)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef float _s_type;
  _s_type s;

   typedef float _l_type;
  _l_type l;

   typedef float _vs_type;
  _vs_type vs;

   typedef float _as_type;
  _as_type as;

   typedef float _vl_type;
  _vl_type vl;

   typedef float _al_type;
  _al_type al;

   typedef int8_t _lane_no_type;
  _lane_no_type lane_no;

   typedef float _time_cost_type;
  _time_cost_type time_cost;

   typedef float _des_cost_type;
  _des_cost_type des_cost;

   typedef float _decision_cost_type;
  _decision_cost_type decision_cost;

   typedef int8_t _decision_tag_type;
  _decision_tag_type decision_tag;





  typedef boost::shared_ptr< ::planning_msgs::ObstacleIn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::ObstacleIn_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleIn_

typedef ::planning_msgs::ObstacleIn_<std::allocator<void> > ObstacleIn;

typedef boost::shared_ptr< ::planning_msgs::ObstacleIn > ObstacleInPtr;
typedef boost::shared_ptr< ::planning_msgs::ObstacleIn const> ObstacleInConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::ObstacleIn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::ObstacleIn_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::ObstacleIn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::ObstacleIn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::ObstacleIn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "839da740b46a1232ec0479df07f94f66";
  }

  static const char* value(const ::planning_msgs::ObstacleIn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x839da740b46a1232ULL;
  static const uint64_t static_value2 = 0xec0479df07f94f66ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/ObstacleIn";
  }

  static const char* value(const ::planning_msgs::ObstacleIn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id\n\
float32 s\n\
float32 l\n\
float32 vs\n\
float32 as\n\
float32 vl\n\
float32 al\n\
int8 lane_no\n\
float32 time_cost\n\
float32 des_cost\n\
float32 decision_cost\n\
int8 decision_tag\n\
";
  }

  static const char* value(const ::planning_msgs::ObstacleIn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.s);
      stream.next(m.l);
      stream.next(m.vs);
      stream.next(m.as);
      stream.next(m.vl);
      stream.next(m.al);
      stream.next(m.lane_no);
      stream.next(m.time_cost);
      stream.next(m.des_cost);
      stream.next(m.decision_cost);
      stream.next(m.decision_tag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleIn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::ObstacleIn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::ObstacleIn_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "l: ";
    Printer<float>::stream(s, indent + "  ", v.l);
    s << indent << "vs: ";
    Printer<float>::stream(s, indent + "  ", v.vs);
    s << indent << "as: ";
    Printer<float>::stream(s, indent + "  ", v.as);
    s << indent << "vl: ";
    Printer<float>::stream(s, indent + "  ", v.vl);
    s << indent << "al: ";
    Printer<float>::stream(s, indent + "  ", v.al);
    s << indent << "lane_no: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lane_no);
    s << indent << "time_cost: ";
    Printer<float>::stream(s, indent + "  ", v.time_cost);
    s << indent << "des_cost: ";
    Printer<float>::stream(s, indent + "  ", v.des_cost);
    s << indent << "decision_cost: ";
    Printer<float>::stream(s, indent + "  ", v.decision_cost);
    s << indent << "decision_tag: ";
    Printer<int8_t>::stream(s, indent + "  ", v.decision_tag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_OBSTACLEIN_H
