// Generated by gencpp from file planning_msgs/ObstaclePred.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_OBSTACLEPRED_H
#define PLANNING_MSGS_MESSAGE_OBSTACLEPRED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning_msgs
{
template <class ContainerAllocator>
struct ObstaclePred_
{
  typedef ObstaclePred_<ContainerAllocator> Type;

  ObstaclePred_()
    : prediction_x()
    , prediction_y()
    , predict_method(0)
    , is_valid(false)  {
      prediction_x.assign(0.0);

      prediction_y.assign(0.0);
  }
  ObstaclePred_(const ContainerAllocator& _alloc)
    : prediction_x()
    , prediction_y()
    , predict_method(0)
    , is_valid(false)  {
  (void)_alloc;
      prediction_x.assign(0.0);

      prediction_y.assign(0.0);
  }



   typedef boost::array<float, 10>  _prediction_x_type;
  _prediction_x_type prediction_x;

   typedef boost::array<float, 10>  _prediction_y_type;
  _prediction_y_type prediction_y;

   typedef uint32_t _predict_method_type;
  _predict_method_type predict_method;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;





  typedef boost::shared_ptr< ::planning_msgs::ObstaclePred_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::ObstaclePred_<ContainerAllocator> const> ConstPtr;

}; // struct ObstaclePred_

typedef ::planning_msgs::ObstaclePred_<std::allocator<void> > ObstaclePred;

typedef boost::shared_ptr< ::planning_msgs::ObstaclePred > ObstaclePredPtr;
typedef boost::shared_ptr< ::planning_msgs::ObstaclePred const> ObstaclePredConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::ObstaclePred_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::ObstaclePred_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::ObstaclePred_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::ObstaclePred_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::ObstaclePred_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff9d8c9ace78f2e23a2505b10de19eaa";
  }

  static const char* value(const ::planning_msgs::ObstaclePred_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff9d8c9ace78f2e2ULL;
  static const uint64_t static_value2 = 0x3a2505b10de19eaaULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/ObstaclePred";
  }

  static const char* value(const ::planning_msgs::ObstaclePred_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[10] prediction_x\n\
float32[10] prediction_y\n\
uint32 predict_method\n\
bool is_valid\n\
";
  }

  static const char* value(const ::planning_msgs::ObstaclePred_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prediction_x);
      stream.next(m.prediction_y);
      stream.next(m.predict_method);
      stream.next(m.is_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstaclePred_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::ObstaclePred_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::ObstaclePred_<ContainerAllocator>& v)
  {
    s << indent << "prediction_x[]" << std::endl;
    for (size_t i = 0; i < v.prediction_x.size(); ++i)
    {
      s << indent << "  prediction_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prediction_x[i]);
    }
    s << indent << "prediction_y[]" << std::endl;
    for (size_t i = 0; i < v.prediction_y.size(); ++i)
    {
      s << indent << "  prediction_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prediction_y[i]);
    }
    s << indent << "predict_method: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.predict_method);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_OBSTACLEPRED_H
