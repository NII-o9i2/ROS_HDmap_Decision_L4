// Generated by gencpp from file planning_msgs/PredictionDebug.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_PREDICTIONDEBUG_H
#define PLANNING_MSGS_MESSAGE_PREDICTIONDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planning_msgs/Propt.h>
#include <planning_msgs/ObstaclePred.h>
#include <planning_msgs/GlobalObstacle.h>

namespace planning_msgs
{
template <class ContainerAllocator>
struct PredictionDebug_
{
  typedef PredictionDebug_<ContainerAllocator> Type;

  PredictionDebug_()
    : propt()
    , obstacle_pred()
    , obstacle_glbl()  {
    }
  PredictionDebug_(const ContainerAllocator& _alloc)
    : propt()
    , obstacle_pred()
    , obstacle_glbl()  {
  (void)_alloc;
      propt.assign( ::planning_msgs::Propt_<ContainerAllocator> (_alloc));

      obstacle_pred.assign( ::planning_msgs::ObstaclePred_<ContainerAllocator> (_alloc));

      obstacle_glbl.assign( ::planning_msgs::GlobalObstacle_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::planning_msgs::Propt_<ContainerAllocator> , 32>  _propt_type;
  _propt_type propt;

   typedef boost::array< ::planning_msgs::ObstaclePred_<ContainerAllocator> , 64>  _obstacle_pred_type;
  _obstacle_pred_type obstacle_pred;

   typedef boost::array< ::planning_msgs::GlobalObstacle_<ContainerAllocator> , 32>  _obstacle_glbl_type;
  _obstacle_glbl_type obstacle_glbl;





  typedef boost::shared_ptr< ::planning_msgs::PredictionDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::PredictionDebug_<ContainerAllocator> const> ConstPtr;

}; // struct PredictionDebug_

typedef ::planning_msgs::PredictionDebug_<std::allocator<void> > PredictionDebug;

typedef boost::shared_ptr< ::planning_msgs::PredictionDebug > PredictionDebugPtr;
typedef boost::shared_ptr< ::planning_msgs::PredictionDebug const> PredictionDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::PredictionDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::PredictionDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::PredictionDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::PredictionDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::PredictionDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d3465080864d10f01de4bdd96ef7bc1";
  }

  static const char* value(const ::planning_msgs::PredictionDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d3465080864d10fULL;
  static const uint64_t static_value2 = 0x01de4bdd96ef7bc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/PredictionDebug";
  }

  static const char* value(const ::planning_msgs::PredictionDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Propt[32] propt\n\
ObstaclePred[64] obstacle_pred\n\
GlobalObstacle[32] obstacle_glbl\n\
\n\
================================================================================\n\
MSG: planning_msgs/Propt\n\
float32 frenet_l\n\
float32 frenet_s\n\
float32 angle_diff\n\
\n\
================================================================================\n\
MSG: planning_msgs/ObstaclePred\n\
float32[10] prediction_x\n\
float32[10] prediction_y\n\
uint32 predict_method\n\
bool is_valid\n\
\n\
================================================================================\n\
MSG: planning_msgs/GlobalObstacle\n\
float32 enu_x\n\
float32 enu_y\n\
float32 enu_theta\n\
float32 enu_vx\n\
float32 enu_vy\n\
float32 enu_ax\n\
float32 enu_ay\n\
float32 confidence\n\
int8 type\n\
float32 velocity\n\
float32 length\n\
float32 width\n\
";
  }

  static const char* value(const ::planning_msgs::PredictionDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.propt);
      stream.next(m.obstacle_pred);
      stream.next(m.obstacle_glbl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictionDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::PredictionDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::PredictionDebug_<ContainerAllocator>& v)
  {
    s << indent << "propt[]" << std::endl;
    for (size_t i = 0; i < v.propt.size(); ++i)
    {
      s << indent << "  propt[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning_msgs::Propt_<ContainerAllocator> >::stream(s, indent + "    ", v.propt[i]);
    }
    s << indent << "obstacle_pred[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_pred.size(); ++i)
    {
      s << indent << "  obstacle_pred[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning_msgs::ObstaclePred_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_pred[i]);
    }
    s << indent << "obstacle_glbl[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_glbl.size(); ++i)
    {
      s << indent << "  obstacle_glbl[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning_msgs::GlobalObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_glbl[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_PREDICTIONDEBUG_H
