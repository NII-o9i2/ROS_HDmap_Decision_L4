// Generated by gencpp from file planning_msgs/Propt.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_PROPT_H
#define PLANNING_MSGS_MESSAGE_PROPT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning_msgs
{
template <class ContainerAllocator>
struct Propt_
{
  typedef Propt_<ContainerAllocator> Type;

  Propt_()
    : frenet_l(0.0)
    , frenet_s(0.0)
    , angle_diff(0.0)  {
    }
  Propt_(const ContainerAllocator& _alloc)
    : frenet_l(0.0)
    , frenet_s(0.0)
    , angle_diff(0.0)  {
  (void)_alloc;
    }



   typedef float _frenet_l_type;
  _frenet_l_type frenet_l;

   typedef float _frenet_s_type;
  _frenet_s_type frenet_s;

   typedef float _angle_diff_type;
  _angle_diff_type angle_diff;





  typedef boost::shared_ptr< ::planning_msgs::Propt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::Propt_<ContainerAllocator> const> ConstPtr;

}; // struct Propt_

typedef ::planning_msgs::Propt_<std::allocator<void> > Propt;

typedef boost::shared_ptr< ::planning_msgs::Propt > ProptPtr;
typedef boost::shared_ptr< ::planning_msgs::Propt const> ProptConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::Propt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::Propt_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/planning_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::Propt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::Propt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::Propt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::Propt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::Propt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::Propt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::Propt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36e7dfcccde17a7b4086abce8e13aa97";
  }

  static const char* value(const ::planning_msgs::Propt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36e7dfcccde17a7bULL;
  static const uint64_t static_value2 = 0x4086abce8e13aa97ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::Propt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/Propt";
  }

  static const char* value(const ::planning_msgs::Propt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::Propt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 frenet_l\n\
float32 frenet_s\n\
float32 angle_diff\n\
";
  }

  static const char* value(const ::planning_msgs::Propt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::Propt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frenet_l);
      stream.next(m.frenet_s);
      stream.next(m.angle_diff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Propt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::Propt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::Propt_<ContainerAllocator>& v)
  {
    s << indent << "frenet_l: ";
    Printer<float>::stream(s, indent + "  ", v.frenet_l);
    s << indent << "frenet_s: ";
    Printer<float>::stream(s, indent + "  ", v.frenet_s);
    s << indent << "angle_diff: ";
    Printer<float>::stream(s, indent + "  ", v.angle_diff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_PROPT_H
