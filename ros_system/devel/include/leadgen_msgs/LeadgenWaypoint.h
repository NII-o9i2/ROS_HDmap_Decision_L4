// Generated by gencpp from file leadgen_msgs/LeadgenWaypoint.msg
// DO NOT EDIT!


#ifndef LEADGEN_MSGS_MESSAGE_LEADGENWAYPOINT_H
#define LEADGEN_MSGS_MESSAGE_LEADGENWAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace leadgen_msgs
{
template <class ContainerAllocator>
struct LeadgenWaypoint_
{
  typedef LeadgenWaypoint_<ContainerAllocator> Type;

  LeadgenWaypoint_()
    : point()
    , theta(0.0)
    , kappa(0.0)
    , station(0.0)
    , lateral(0.0)
    , speed(0.0)
    , accel(0.0)
    , time_arrival()  {
    }
  LeadgenWaypoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , theta(0.0)
    , kappa(0.0)
    , station(0.0)
    , lateral(0.0)
    , speed(0.0)
    , accel(0.0)
    , time_arrival()  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _kappa_type;
  _kappa_type kappa;

   typedef double _station_type;
  _station_type station;

   typedef double _lateral_type;
  _lateral_type lateral;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _accel_type;
  _accel_type accel;

   typedef ros::Time _time_arrival_type;
  _time_arrival_type time_arrival;





  typedef boost::shared_ptr< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> const> ConstPtr;

}; // struct LeadgenWaypoint_

typedef ::leadgen_msgs::LeadgenWaypoint_<std::allocator<void> > LeadgenWaypoint;

typedef boost::shared_ptr< ::leadgen_msgs::LeadgenWaypoint > LeadgenWaypointPtr;
typedef boost::shared_ptr< ::leadgen_msgs::LeadgenWaypoint const> LeadgenWaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace leadgen_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'leadgen_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/leadgen_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38a50bfbdbab44a271e46dddaf38da0a";
  }

  static const char* value(const ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38a50bfbdbab44a2ULL;
  static const uint64_t static_value2 = 0x71e46dddaf38da0aULL;
};

template<class ContainerAllocator>
struct DataType< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leadgen_msgs/LeadgenWaypoint";
  }

  static const char* value(const ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is to describe a WAYPOINT in the target trajectory\n\
\n\
# header\n\
# std_msgs/Header header\n\
\n\
# 3D position\n\
geometry_msgs/Point point\n\
\n\
# trace info\n\
float64 theta # the heading of the trace at this point\n\
float64 kappa # the curvature of the trace at this point\n\
\n\
# SL info\n\
float64 station\n\
float64 lateral\n\
\n\
# speed info\n\
float32 speed # in [m/s]\n\
float32 accel # in [m/s^2],(optional)\n\
\n\
time time_arrival # the expected arrival time of this point\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.theta);
      stream.next(m.kappa);
      stream.next(m.station);
      stream.next(m.lateral);
      stream.next(m.speed);
      stream.next(m.accel);
      stream.next(m.time_arrival);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeadgenWaypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leadgen_msgs::LeadgenWaypoint_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "station: ";
    Printer<double>::stream(s, indent + "  ", v.station);
    s << indent << "lateral: ";
    Printer<double>::stream(s, indent + "  ", v.lateral);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "accel: ";
    Printer<float>::stream(s, indent + "  ", v.accel);
    s << indent << "time_arrival: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_arrival);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEADGEN_MSGS_MESSAGE_LEADGENWAYPOINT_H
