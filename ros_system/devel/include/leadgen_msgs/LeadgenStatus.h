// Generated by gencpp from file leadgen_msgs/LeadgenStatus.msg
// DO NOT EDIT!


#ifndef LEADGEN_MSGS_MESSAGE_LEADGENSTATUS_H
#define LEADGEN_MSGS_MESSAGE_LEADGENSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <leadgen_msgs/LeadgenChassis.h>

namespace leadgen_msgs
{
template <class ContainerAllocator>
struct LeadgenStatus_
{
  typedef LeadgenStatus_<ContainerAllocator> Type;

  LeadgenStatus_()
    : header()
    , pose()
    , linear_velocity()
    , linear_acceleration()
    , angular_velocity()
    , chassis_status()  {
    }
  LeadgenStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , linear_velocity(_alloc)
    , linear_acceleration(_alloc)
    , angular_velocity(_alloc)
    , chassis_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::leadgen_msgs::LeadgenChassis_<ContainerAllocator>  _chassis_status_type;
  _chassis_status_type chassis_status;





  typedef boost::shared_ptr< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LeadgenStatus_

typedef ::leadgen_msgs::LeadgenStatus_<std::allocator<void> > LeadgenStatus;

typedef boost::shared_ptr< ::leadgen_msgs::LeadgenStatus > LeadgenStatusPtr;
typedef boost::shared_ptr< ::leadgen_msgs::LeadgenStatus const> LeadgenStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace leadgen_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'leadgen_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/leadgen_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56b823ded06f347e2acd96e136b79bac";
  }

  static const char* value(const ::leadgen_msgs::LeadgenStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56b823ded06f347eULL;
  static const uint64_t static_value2 = 0x2acd96e136b79bacULL;
};

template<class ContainerAllocator>
struct DataType< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leadgen_msgs/LeadgenStatus";
  }

  static const char* value(const ::leadgen_msgs::LeadgenStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is to describe the overall vehicle status\n\
# The message includes both vehicle positioning info and Chassis info\n\
\n\
# Header\n\
std_msgs/Header header\n\
\n\
# vehicle position\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Vector3 linear_velocity\n\
geometry_msgs/Vector3 linear_acceleration\n\
geometry_msgs/Vector3 angular_velocity\n\
\n\
# vehicle chassis status\n\
LeadgenChassis chassis_status\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: leadgen_msgs/LeadgenChassis\n\
# This message is to describe the chassis status of the vehicle\n\
# The information usually comes from CAN bus of the vehicle interface\n\
\n\
# Header\n\
std_msgs/Header header\n\
\n\
# constant definitions\n\
# auto_mode is bit-wise marker\n\
# +-------------------+-------------------+\n\
# | H3 | H2 | H1 | H0 | L3 | L2 | L1 | L0 |\n\
# +-------------------+-------------------+\n\
# |  Steering modes   |   speed modes     |\n\
# +-------------------+-------------------+\n\
uint8 AUTO_MODE_OFF = 0\n\
uint8 AUTO_MODE_SYSTEM_ON = 1 # bit L0\n\
uint8 AUTO_MODE_BRAKE_ON = 2 # bit L1\n\
uint8 AUTO_MODE_THROTTLE_ON = 4  # bit L2\n\
uint8 AUTO_MODE_SPEED_ON = 8  # bit L3\n\
\n\
uint8 AUTO_MODE_STEER_ON = 16 # bit H0, 0x10\n\
uint8 AUTO_MODE_STEER_POS = 32 # bit H1, 0x20\n\
uint8 AUTO_MODE_STEER_VEL = 64 # bit H2, 0x40\n\
uint8 AUTO_MODE_STEER_TOR = 128 # bit H3, 0x80\n\
\n\
# vehicle current mode\n\
uint8 auto_mode\n\
\n\
# vehicle current longitude status\n\
float32 speed # in signed [m/s]\n\
float32 acceleration # in signed [m/s^2]\n\
float32 throttle # in [percentage]\n\
float32 brake # brake pressure [MPa]\n\
\n\
# gear control is bit-wise marker\n\
# +-------------------+-------------------+\n\
# | H3 | H2 | H1 | H0 | L3 | L2 | L1 | L0 |\n\
# +-------------------+-------------------+\n\
uint8 GEAR_INVALID = 0\n\
uint8 GEAR_P = 1\n\
uint8 GEAR_R = 2\n\
uint8 GEAR_N = 4\n\
uint8 GEAR_D = 8\n\
\n\
int8 gear # gear position\n\
\n\
# vehicle current steering status\n\
float32 steer_pos # in signed [percentage], positive to left\n\
\n\
# other operational status(optional)\n\
float32[] wheel_speed\n\
float32 engine_rpm\n\
float32 odometer\n\
float32 fuel_level\n\
";
  }

  static const char* value(const ::leadgen_msgs::LeadgenStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.linear_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
      stream.next(m.chassis_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeadgenStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leadgen_msgs::LeadgenStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leadgen_msgs::LeadgenStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "chassis_status: ";
    s << std::endl;
    Printer< ::leadgen_msgs::LeadgenChassis_<ContainerAllocator> >::stream(s, indent + "  ", v.chassis_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEADGEN_MSGS_MESSAGE_LEADGENSTATUS_H
