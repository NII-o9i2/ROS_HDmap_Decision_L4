// Generated by gencpp from file leadgen_msgs/LeadgenHMI.msg
// DO NOT EDIT!


#ifndef LEADGEN_MSGS_MESSAGE_LEADGENHMI_H
#define LEADGEN_MSGS_MESSAGE_LEADGENHMI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <leadgen_msgs/LeadgenPointArray.h>
#include <leadgen_msgs/LeadgenObstacleOutput.h>

namespace leadgen_msgs
{
template <class ContainerAllocator>
struct LeadgenHMI_
{
  typedef LeadgenHMI_<ContainerAllocator> Type;

  LeadgenHMI_()
    : header()
    , lane_decision(0)
    , traffic_light_result(0)
    , lane_speed_limit(0.0)
    , lane_borders()
    , obs_decision_result()  {
    }
  LeadgenHMI_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane_decision(0)
    , traffic_light_result(0)
    , lane_speed_limit(0.0)
    , lane_borders(_alloc)
    , obs_decision_result(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _lane_decision_type;
  _lane_decision_type lane_decision;

   typedef uint8_t _traffic_light_result_type;
  _traffic_light_result_type traffic_light_result;

   typedef float _lane_speed_limit_type;
  _lane_speed_limit_type lane_speed_limit;

   typedef std::vector< ::leadgen_msgs::LeadgenPointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::leadgen_msgs::LeadgenPointArray_<ContainerAllocator> >::other >  _lane_borders_type;
  _lane_borders_type lane_borders;

   typedef std::vector< ::leadgen_msgs::LeadgenObstacleOutput_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::leadgen_msgs::LeadgenObstacleOutput_<ContainerAllocator> >::other >  _obs_decision_result_type;
  _obs_decision_result_type obs_decision_result;



  enum {
    KEEP_IN_LANE = 0u,
    MERGE_LEFT_LANE = 1u,
    MERGE_RIGHT_LANE = 2u,
    TRAFFIC_LIGHT_NA = 0u,
    TRAFFIC_LIGHT_RED = 1u,
    TRAFFIC_LIGHT_GREEN = 2u,
  };


  typedef boost::shared_ptr< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> const> ConstPtr;

}; // struct LeadgenHMI_

typedef ::leadgen_msgs::LeadgenHMI_<std::allocator<void> > LeadgenHMI;

typedef boost::shared_ptr< ::leadgen_msgs::LeadgenHMI > LeadgenHMIPtr;
typedef boost::shared_ptr< ::leadgen_msgs::LeadgenHMI const> LeadgenHMIConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace leadgen_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'leadgen_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/planning/leadgen_msgs/./'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d84c81bb319da0c42ae894c7b0cac72";
  }

  static const char* value(const ::leadgen_msgs::LeadgenHMI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d84c81bb319da0cULL;
  static const uint64_t static_value2 = 0x42ae894c7b0cac72ULL;
};

template<class ContainerAllocator>
struct DataType< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leadgen_msgs/LeadgenHMI";
  }

  static const char* value(const ::leadgen_msgs::LeadgenHMI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is to describe decistion and planning message for HMI\n\
\n\
# Header\n\
std_msgs/Header header\n\
\n\
# lane changing decisions\n\
uint8 lane_decision\n\
\n\
# enum for lane decisions\n\
uint8 KEEP_IN_LANE = 0\n\
uint8 MERGE_LEFT_LANE = 1\n\
uint8 MERGE_RIGHT_LANE = 2\n\
\n\
# traffic light result\n\
uint8 traffic_light_result\n\
\n\
# enum for traffic light result\n\
uint8 TRAFFIC_LIGHT_NA = 0\n\
uint8 TRAFFIC_LIGHT_RED = 1\n\
uint8 TRAFFIC_LIGHT_GREEN = 2\n\
\n\
# current lane limit speed\n\
float32 lane_speed_limit # km/h\n\
\n\
# lane borders\n\
LeadgenPointArray[] lane_borders\n\
\n\
# obstacle output\n\
LeadgenObstacleOutput[] obs_decision_result\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: leadgen_msgs/LeadgenPointArray\n\
# This message is to describe an array of geometry_msgs/Point\n\
\n\
geometry_msgs/Point[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: leadgen_msgs/LeadgenObstacleOutput\n\
# This message is to describe the information of an obstacle\n\
\n\
# Header\n\
std_msgs/Header header\n\
\n\
# obstacle ID number\n\
int32 id\n\
\n\
# obstacle detection sources(optional)\n\
uint16 source_sensor\n\
\n\
# obstacle source sensor definition, using bit-wise operations\n\
# A single obstacle can be detected by multiple sensors, and use OR operation as the result\n\
uint16 SENSOR_LIDAR = 1\n\
uint16 SENSOR_VISION = 2\n\
uint16 SENSOR_RADAR = 4\n\
\n\
# obstacle type(optional)\n\
uint8 type\n\
\n\
# obstacle type definitions\n\
# subject to change\n\
\n\
uint8 OBSTACLE_TYPE_UNKNOWN = 0\n\
uint8 OBSTACLE_TYPE_SMALL = 1\n\
uint8 OBSTACLE_TYPE_BIG = 2\n\
uint8 OBSTACLE_TYPE_CAR = 3\n\
uint8 OBSTACLE_TYPE_BUS = 4\n\
uint8 OBSTACLE_TYPE_TRUCK = 5\n\
uint8 OBSTACLE_TYPE_CYCLER = 6\n\
uint8 OBSTACLE_TYPE_PEDESTRIAN = 7\n\
uint8 OBSTACLE_TYPE_PLANT = 8\n\
uint8 OBSTACLE_TYPE_FENCE = 9\n\
\n\
# obstacle status(optional)\n\
uint8 status\n\
\n\
# obstacle status definitions\n\
# according to Mobileye specs\n\
uint8 OBSTACLE_STATUS_UNDEFINED = 0\n\
uint8 OBSTACLE_STATUS_STANDING = 1\n\
uint8 OBSTACLE_STATUS_STOPPED = 2\n\
uint8 OBSTACLE_STATUS_MOVING = 3\n\
uint8 OBSTACLE_STATUS_ONCOMING = 4\n\
uint8 OBSTACLE_STATUS_PARKED = 5\n\
uint8 OBSTACLE_STATUS_UNUSED = 6\n\
\n\
# obstacle cutting(optional)\n\
uint8 cutting\n\
\n\
# obstacle cutting definitions\n\
# according to Mobileye specs\n\
uint8 OBSTACLE_CUTTING_UNDEFINED = 0\n\
uint8 OBSTACLE_IN_HOST_LANE = 1\n\
uint8 OBSTACLE_OUT_HOST_LANE = 2\n\
uint8 OBSTACLE_CUTTING_IN = 3\n\
uint8 OBSTACLE_CUTTING_OUT = 4\n\
\n\
# obstacle size\n\
float32 length  # along obstacle's +x direction, in [m] meter\n\
float32 width   # along obstacle's +y direction, in [m]\n\
float32 height  # along obstacle's +z direction, in [m]\n\
\n\
float32 velocity_heading # the velocity heading in the world frame\n\
\n\
# obstacle pose in body frame\n\
bool rlt_valid  # relative information valid\n\
geometry_msgs/Point rlt_position    # relative position to body frame\n\
float32 rlt_theta   # relative theta angle, to body frame along z axis\n\
\n\
# obstacle velocity in body frame\n\
geometry_msgs/Vector3 rlt_velocity  # relative velocity to body frame \n\
\n\
# obstacle pose in world frame\n\
bool abs_valid  # absolute information valid\n\
geometry_msgs/Point abs_position    # absolute position in world frame\n\
float32 abs_theta   # absolute yaw angle in world frame\n\
\n\
# obstacle velocity in world frame\n\
geometry_msgs/Vector3 abs_velocity  # absolute velocity in world frame\n\
\n\
# decision tags\n\
uint8 longitude_tag\n\
uint8 lateral_tag\n\
\n\
# decision tag definitions\n\
uint8 IGNORE = 0 \n\
uint8 STAY_BEHIND = 1\n\
\n\
uint8 NUDGE_LEFT = 2   \n\
uint8 NUDGE_RIGHT = 3 \n\
uint8 NOT_AVAILABLE = 4 \n\
\n\
LeadgenWaypoint[] predicted_traj\n\
float32 predicted_period\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: leadgen_msgs/LeadgenWaypoint\n\
# This message is to describe a WAYPOINT in the target trajectory\n\
\n\
# header\n\
# std_msgs/Header header\n\
\n\
# 3D position\n\
geometry_msgs/Point point\n\
\n\
# trace info\n\
float64 theta # the heading of the trace at this point\n\
float64 kappa # the curvature of the trace at this point\n\
\n\
# SL info\n\
float64 station\n\
float64 lateral\n\
\n\
# speed info\n\
float32 speed # in [m/s]\n\
float32 accel # in [m/s^2],(optional)\n\
\n\
time time_arrival # the expected arrival time of this point\n\
\n\
\n\
";
  }

  static const char* value(const ::leadgen_msgs::LeadgenHMI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane_decision);
      stream.next(m.traffic_light_result);
      stream.next(m.lane_speed_limit);
      stream.next(m.lane_borders);
      stream.next(m.obs_decision_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeadgenHMI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leadgen_msgs::LeadgenHMI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leadgen_msgs::LeadgenHMI_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane_decision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_decision);
    s << indent << "traffic_light_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.traffic_light_result);
    s << indent << "lane_speed_limit: ";
    Printer<float>::stream(s, indent + "  ", v.lane_speed_limit);
    s << indent << "lane_borders[]" << std::endl;
    for (size_t i = 0; i < v.lane_borders.size(); ++i)
    {
      s << indent << "  lane_borders[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::leadgen_msgs::LeadgenPointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.lane_borders[i]);
    }
    s << indent << "obs_decision_result[]" << std::endl;
    for (size_t i = 0; i < v.obs_decision_result.size(); ++i)
    {
      s << indent << "  obs_decision_result[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::leadgen_msgs::LeadgenObstacleOutput_<ContainerAllocator> >::stream(s, indent + "    ", v.obs_decision_result[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEADGEN_MSGS_MESSAGE_LEADGENHMI_H
