// Generated by gencpp from file ytthdmap_msgs/S_LINE.msg
// DO NOT EDIT!


#ifndef YTTHDMAP_MSGS_MESSAGE_S_LINE_H
#define YTTHDMAP_MSGS_MESSAGE_S_LINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ytthdmap_msgs/S_POINT.h>

namespace ytthdmap_msgs
{
template <class ContainerAllocator>
struct S_LINE_
{
  typedef S_LINE_<ContainerAllocator> Type;

  S_LINE_()
    : type(0)
    , linetype(0)
    , point()
    , pointnum(0)  {
    }
  S_LINE_(const ContainerAllocator& _alloc)
    : type(0)
    , linetype(0)
    , point()
    , pointnum(0)  {
  (void)_alloc;
      point.assign( ::ytthdmap_msgs::S_POINT_<ContainerAllocator> (_alloc));
  }



   typedef int16_t _type_type;
  _type_type type;

   typedef int16_t _linetype_type;
  _linetype_type linetype;

   typedef boost::array< ::ytthdmap_msgs::S_POINT_<ContainerAllocator> , 100>  _point_type;
  _point_type point;

   typedef int16_t _pointnum_type;
  _pointnum_type pointnum;





  typedef boost::shared_ptr< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> const> ConstPtr;

}; // struct S_LINE_

typedef ::ytthdmap_msgs::S_LINE_<std::allocator<void> > S_LINE;

typedef boost::shared_ptr< ::ytthdmap_msgs::S_LINE > S_LINEPtr;
typedef boost::shared_ptr< ::ytthdmap_msgs::S_LINE const> S_LINEConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ytthdmap_msgs::S_LINE_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ytthdmap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ytthdmap_msgs': ['/home/xiaotongfeng/ros_test/src/ytthdmap/ytthdmap_msgs/./']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3328978b048138c7828f4b617f1ca2a";
  }

  static const char* value(const ::ytthdmap_msgs::S_LINE_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3328978b048138cULL;
  static const uint64_t static_value2 = 0x7828f4b617f1ca2aULL;
};

template<class ContainerAllocator>
struct DataType< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ytthdmap_msgs/S_LINE";
  }

  static const char* value(const ::ytthdmap_msgs::S_LINE_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 type\n\
int16 linetype\n\
S_POINT[100] point\n\
int16 pointnum\n\
================================================================================\n\
MSG: ytthdmap_msgs/S_POINT\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ytthdmap_msgs::S_LINE_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.linetype);
      stream.next(m.point);
      stream.next(m.pointnum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct S_LINE_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ytthdmap_msgs::S_LINE_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "linetype: ";
    Printer<int16_t>::stream(s, indent + "  ", v.linetype);
    s << indent << "point[]" << std::endl;
    for (size_t i = 0; i < v.point.size(); ++i)
    {
      s << indent << "  point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ytthdmap_msgs::S_POINT_<ContainerAllocator> >::stream(s, indent + "    ", v.point[i]);
    }
    s << indent << "pointnum: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pointnum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YTTHDMAP_MSGS_MESSAGE_S_LINE_H
