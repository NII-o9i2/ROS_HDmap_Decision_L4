// Generated by gencpp from file ytthdmap_msgs/S_LANEINFO.msg
// DO NOT EDIT!


#ifndef YTTHDMAP_MSGS_MESSAGE_S_LANEINFO_H
#define YTTHDMAP_MSGS_MESSAGE_S_LANEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ytthdmap_msgs/S_LINE.h>
#include <ytthdmap_msgs/S_LINE.h>
#include <ytthdmap_msgs/S_LINE.h>

namespace ytthdmap_msgs
{
template <class ContainerAllocator>
struct S_LANEINFO_
{
  typedef S_LANEINFO_<ContainerAllocator> Type;

  S_LANEINFO_()
    : centerline()
    , leftboundry()
    , rightboundry()
    , width(0.0)
    , IsPartofRouting(false)
    , type(0)
    , direction(0)
    , id(0)
    , length(0.0)  {
    }
  S_LANEINFO_(const ContainerAllocator& _alloc)
    : centerline(_alloc)
    , leftboundry(_alloc)
    , rightboundry(_alloc)
    , width(0.0)
    , IsPartofRouting(false)
    , type(0)
    , direction(0)
    , id(0)
    , length(0.0)  {
  (void)_alloc;
    }



   typedef  ::ytthdmap_msgs::S_LINE_<ContainerAllocator>  _centerline_type;
  _centerline_type centerline;

   typedef  ::ytthdmap_msgs::S_LINE_<ContainerAllocator>  _leftboundry_type;
  _leftboundry_type leftboundry;

   typedef  ::ytthdmap_msgs::S_LINE_<ContainerAllocator>  _rightboundry_type;
  _rightboundry_type rightboundry;

   typedef float _width_type;
  _width_type width;

   typedef uint8_t _IsPartofRouting_type;
  _IsPartofRouting_type IsPartofRouting;

   typedef int16_t _type_type;
  _type_type type;

   typedef int16_t _direction_type;
  _direction_type direction;

   typedef int16_t _id_type;
  _id_type id;

   typedef float _length_type;
  _length_type length;





  typedef boost::shared_ptr< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> const> ConstPtr;

}; // struct S_LANEINFO_

typedef ::ytthdmap_msgs::S_LANEINFO_<std::allocator<void> > S_LANEINFO;

typedef boost::shared_ptr< ::ytthdmap_msgs::S_LANEINFO > S_LANEINFOPtr;
typedef boost::shared_ptr< ::ytthdmap_msgs::S_LANEINFO const> S_LANEINFOConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ytthdmap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ytthdmap_msgs': ['/home/xiaotongfeng/Desktop/ROS_HDmap_Decision_L4/ros_system/src/ytthdmap/ytthdmap_msgs/./']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a14e40ee54202dfeea4f9379da90309";
  }

  static const char* value(const ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a14e40ee54202dfULL;
  static const uint64_t static_value2 = 0xeea4f9379da90309ULL;
};

template<class ContainerAllocator>
struct DataType< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ytthdmap_msgs/S_LANEINFO";
  }

  static const char* value(const ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "S_LINE centerline\n\
S_LINE leftboundry\n\
S_LINE rightboundry\n\
float32 width\n\
bool IsPartofRouting\n\
int16 type\n\
int16 direction\n\
int16 id\n\
float32 length\n\
\n\
================================================================================\n\
MSG: ytthdmap_msgs/S_LINE\n\
int16 type\n\
int16[100] linetype\n\
S_POINT[100] point\n\
int16 pointnum\n\
\n\
================================================================================\n\
MSG: ytthdmap_msgs/S_POINT\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centerline);
      stream.next(m.leftboundry);
      stream.next(m.rightboundry);
      stream.next(m.width);
      stream.next(m.IsPartofRouting);
      stream.next(m.type);
      stream.next(m.direction);
      stream.next(m.id);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct S_LANEINFO_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ytthdmap_msgs::S_LANEINFO_<ContainerAllocator>& v)
  {
    s << indent << "centerline: ";
    s << std::endl;
    Printer< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >::stream(s, indent + "  ", v.centerline);
    s << indent << "leftboundry: ";
    s << std::endl;
    Printer< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >::stream(s, indent + "  ", v.leftboundry);
    s << indent << "rightboundry: ";
    s << std::endl;
    Printer< ::ytthdmap_msgs::S_LINE_<ContainerAllocator> >::stream(s, indent + "  ", v.rightboundry);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "IsPartofRouting: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IsPartofRouting);
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "direction: ";
    Printer<int16_t>::stream(s, indent + "  ", v.direction);
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YTTHDMAP_MSGS_MESSAGE_S_LANEINFO_H
