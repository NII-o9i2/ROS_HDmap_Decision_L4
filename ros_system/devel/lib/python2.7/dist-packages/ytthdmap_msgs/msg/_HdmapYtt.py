# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ytthdmap_msgs/HdmapYtt.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ytthdmap_msgs.msg
import std_msgs.msg

class HdmapYtt(genpy.Message):
  _md5sum = "06136882eb0000675a95c6a59756dfc6"
  _type = "ytthdmap_msgs/HdmapYtt"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
int16 time
int16 isvalidlane
int16 curlane
S_LANEINFO laneinfo 
float32 speedlim
S_STATIONLOCATION stationlocation
S_STOPLINE stopline
bool istunnel
int16 nextlaneCH
int16 traffic
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ytthdmap_msgs/S_LANEINFO
S_LINE centerline
S_LINE leftboundry
S_LINE rightboundry
float64 width
bool IsPartofRouting
int16 type
int16 direction
int16 id
float64 length
================================================================================
MSG: ytthdmap_msgs/S_LINE
int16 type
int16 linetype
S_POINT[100] point
int16 pointnum
================================================================================
MSG: ytthdmap_msgs/S_POINT
float64 x
float64 y
float64 z
================================================================================
MSG: ytthdmap_msgs/S_STATIONLOCATION
float64 x
float64 y
float64 z
================================================================================
MSG: ytthdmap_msgs/S_STOPLINE
int16 offset
int16 latOffset
int16 type
int16 validnum
S_POINT[100] point"""
  __slots__ = ['header','time','isvalidlane','curlane','laneinfo','speedlim','stationlocation','stopline','istunnel','nextlaneCH','traffic']
  _slot_types = ['std_msgs/Header','int16','int16','int16','ytthdmap_msgs/S_LANEINFO','float32','ytthdmap_msgs/S_STATIONLOCATION','ytthdmap_msgs/S_STOPLINE','bool','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,isvalidlane,curlane,laneinfo,speedlim,stationlocation,stopline,istunnel,nextlaneCH,traffic

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdmapYtt, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = 0
      if self.isvalidlane is None:
        self.isvalidlane = 0
      if self.curlane is None:
        self.curlane = 0
      if self.laneinfo is None:
        self.laneinfo = ytthdmap_msgs.msg.S_LANEINFO()
      if self.speedlim is None:
        self.speedlim = 0.
      if self.stationlocation is None:
        self.stationlocation = ytthdmap_msgs.msg.S_STATIONLOCATION()
      if self.stopline is None:
        self.stopline = ytthdmap_msgs.msg.S_STOPLINE()
      if self.istunnel is None:
        self.istunnel = False
      if self.nextlaneCH is None:
        self.nextlaneCH = 0
      if self.traffic is None:
        self.traffic = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time = 0
      self.isvalidlane = 0
      self.curlane = 0
      self.laneinfo = ytthdmap_msgs.msg.S_LANEINFO()
      self.speedlim = 0.
      self.stationlocation = ytthdmap_msgs.msg.S_STATIONLOCATION()
      self.stopline = ytthdmap_msgs.msg.S_STOPLINE()
      self.istunnel = False
      self.nextlaneCH = 0
      self.traffic = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5h().pack(_x.time, _x.isvalidlane, _x.curlane, _x.laneinfo.centerline.type, _x.laneinfo.centerline.linetype))
      for val1 in self.laneinfo.centerline.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.laneinfo.centerline.pointnum, _x.laneinfo.leftboundry.type, _x.laneinfo.leftboundry.linetype))
      for val1 in self.laneinfo.leftboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.laneinfo.leftboundry.pointnum, _x.laneinfo.rightboundry.type, _x.laneinfo.rightboundry.linetype))
      for val1 in self.laneinfo.rightboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_hdB3hdf3d4h().pack(_x.laneinfo.rightboundry.pointnum, _x.laneinfo.width, _x.laneinfo.IsPartofRouting, _x.laneinfo.type, _x.laneinfo.direction, _x.laneinfo.id, _x.laneinfo.length, _x.speedlim, _x.stationlocation.x, _x.stationlocation.y, _x.stationlocation.z, _x.stopline.offset, _x.stopline.latOffset, _x.stopline.type, _x.stopline.validnum))
      for val1 in self.stopline.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_B2h().pack(_x.istunnel, _x.nextlaneCH, _x.traffic))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.laneinfo is None:
        self.laneinfo = ytthdmap_msgs.msg.S_LANEINFO()
      if self.stationlocation is None:
        self.stationlocation = ytthdmap_msgs.msg.S_STATIONLOCATION()
      if self.stopline is None:
        self.stopline = ytthdmap_msgs.msg.S_STOPLINE()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.time, _x.isvalidlane, _x.curlane, _x.laneinfo.centerline.type, _x.laneinfo.centerline.linetype,) = _get_struct_5h().unpack(str[start:end])
      self.laneinfo.centerline.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.laneinfo.centerline.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.laneinfo.centerline.pointnum, _x.laneinfo.leftboundry.type, _x.laneinfo.leftboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.laneinfo.leftboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.laneinfo.leftboundry.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.laneinfo.leftboundry.pointnum, _x.laneinfo.rightboundry.type, _x.laneinfo.rightboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.laneinfo.rightboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.laneinfo.rightboundry.point.append(val1)
      _x = self
      start = end
      end += 61
      (_x.laneinfo.rightboundry.pointnum, _x.laneinfo.width, _x.laneinfo.IsPartofRouting, _x.laneinfo.type, _x.laneinfo.direction, _x.laneinfo.id, _x.laneinfo.length, _x.speedlim, _x.stationlocation.x, _x.stationlocation.y, _x.stationlocation.z, _x.stopline.offset, _x.stopline.latOffset, _x.stopline.type, _x.stopline.validnum,) = _get_struct_hdB3hdf3d4h().unpack(str[start:end])
      self.laneinfo.IsPartofRouting = bool(self.laneinfo.IsPartofRouting)
      self.stopline.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.stopline.point.append(val1)
      _x = self
      start = end
      end += 5
      (_x.istunnel, _x.nextlaneCH, _x.traffic,) = _get_struct_B2h().unpack(str[start:end])
      self.istunnel = bool(self.istunnel)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5h().pack(_x.time, _x.isvalidlane, _x.curlane, _x.laneinfo.centerline.type, _x.laneinfo.centerline.linetype))
      for val1 in self.laneinfo.centerline.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.laneinfo.centerline.pointnum, _x.laneinfo.leftboundry.type, _x.laneinfo.leftboundry.linetype))
      for val1 in self.laneinfo.leftboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.laneinfo.leftboundry.pointnum, _x.laneinfo.rightboundry.type, _x.laneinfo.rightboundry.linetype))
      for val1 in self.laneinfo.rightboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_hdB3hdf3d4h().pack(_x.laneinfo.rightboundry.pointnum, _x.laneinfo.width, _x.laneinfo.IsPartofRouting, _x.laneinfo.type, _x.laneinfo.direction, _x.laneinfo.id, _x.laneinfo.length, _x.speedlim, _x.stationlocation.x, _x.stationlocation.y, _x.stationlocation.z, _x.stopline.offset, _x.stopline.latOffset, _x.stopline.type, _x.stopline.validnum))
      for val1 in self.stopline.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_B2h().pack(_x.istunnel, _x.nextlaneCH, _x.traffic))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.laneinfo is None:
        self.laneinfo = ytthdmap_msgs.msg.S_LANEINFO()
      if self.stationlocation is None:
        self.stationlocation = ytthdmap_msgs.msg.S_STATIONLOCATION()
      if self.stopline is None:
        self.stopline = ytthdmap_msgs.msg.S_STOPLINE()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.time, _x.isvalidlane, _x.curlane, _x.laneinfo.centerline.type, _x.laneinfo.centerline.linetype,) = _get_struct_5h().unpack(str[start:end])
      self.laneinfo.centerline.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.laneinfo.centerline.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.laneinfo.centerline.pointnum, _x.laneinfo.leftboundry.type, _x.laneinfo.leftboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.laneinfo.leftboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.laneinfo.leftboundry.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.laneinfo.leftboundry.pointnum, _x.laneinfo.rightboundry.type, _x.laneinfo.rightboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.laneinfo.rightboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.laneinfo.rightboundry.point.append(val1)
      _x = self
      start = end
      end += 61
      (_x.laneinfo.rightboundry.pointnum, _x.laneinfo.width, _x.laneinfo.IsPartofRouting, _x.laneinfo.type, _x.laneinfo.direction, _x.laneinfo.id, _x.laneinfo.length, _x.speedlim, _x.stationlocation.x, _x.stationlocation.y, _x.stationlocation.z, _x.stopline.offset, _x.stopline.latOffset, _x.stopline.type, _x.stopline.validnum,) = _get_struct_hdB3hdf3d4h().unpack(str[start:end])
      self.laneinfo.IsPartofRouting = bool(self.laneinfo.IsPartofRouting)
      self.stopline.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.stopline.point.append(val1)
      _x = self
      start = end
      end += 5
      (_x.istunnel, _x.nextlaneCH, _x.traffic,) = _get_struct_B2h().unpack(str[start:end])
      self.istunnel = bool(self.istunnel)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3h = None
def _get_struct_3h():
    global _struct_3h
    if _struct_3h is None:
        _struct_3h = struct.Struct("<3h")
    return _struct_3h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_hdB3hdf3d4h = None
def _get_struct_hdB3hdf3d4h():
    global _struct_hdB3hdf3d4h
    if _struct_hdB3hdf3d4h is None:
        _struct_hdB3hdf3d4h = struct.Struct("<hdB3hdf3d4h")
    return _struct_hdB3hdf3d4h
_struct_5h = None
def _get_struct_5h():
    global _struct_5h
    if _struct_5h is None:
        _struct_5h = struct.Struct("<5h")
    return _struct_5h
_struct_B2h = None
def _get_struct_B2h():
    global _struct_B2h
    if _struct_B2h is None:
        _struct_B2h = struct.Struct("<B2h")
    return _struct_B2h
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
