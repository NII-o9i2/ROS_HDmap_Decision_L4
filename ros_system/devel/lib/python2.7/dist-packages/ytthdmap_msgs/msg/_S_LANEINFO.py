# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ytthdmap_msgs/S_LANEINFO.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ytthdmap_msgs.msg

class S_LANEINFO(genpy.Message):
  _md5sum = "229d86e3f7c3e9edaf166d31399cc77c"
  _type = "ytthdmap_msgs/S_LANEINFO"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """S_LINE centerline
S_LINE leftboundry
S_LINE rightboundry
float64 width
bool IsPartofRouting
int16 type
int16 direction
int16 id
float64 length
================================================================================
MSG: ytthdmap_msgs/S_LINE
int16 type
int16 linetype
S_POINT[100] point
int16 pointnum
================================================================================
MSG: ytthdmap_msgs/S_POINT
float64 x
float64 y
float64 z"""
  __slots__ = ['centerline','leftboundry','rightboundry','width','IsPartofRouting','type','direction','id','length']
  _slot_types = ['ytthdmap_msgs/S_LINE','ytthdmap_msgs/S_LINE','ytthdmap_msgs/S_LINE','float64','bool','int16','int16','int16','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       centerline,leftboundry,rightboundry,width,IsPartofRouting,type,direction,id,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(S_LANEINFO, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.centerline is None:
        self.centerline = ytthdmap_msgs.msg.S_LINE()
      if self.leftboundry is None:
        self.leftboundry = ytthdmap_msgs.msg.S_LINE()
      if self.rightboundry is None:
        self.rightboundry = ytthdmap_msgs.msg.S_LINE()
      if self.width is None:
        self.width = 0.
      if self.IsPartofRouting is None:
        self.IsPartofRouting = False
      if self.type is None:
        self.type = 0
      if self.direction is None:
        self.direction = 0
      if self.id is None:
        self.id = 0
      if self.length is None:
        self.length = 0.
    else:
      self.centerline = ytthdmap_msgs.msg.S_LINE()
      self.leftboundry = ytthdmap_msgs.msg.S_LINE()
      self.rightboundry = ytthdmap_msgs.msg.S_LINE()
      self.width = 0.
      self.IsPartofRouting = False
      self.type = 0
      self.direction = 0
      self.id = 0
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h().pack(_x.centerline.type, _x.centerline.linetype))
      for val1 in self.centerline.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.centerline.pointnum, _x.leftboundry.type, _x.leftboundry.linetype))
      for val1 in self.leftboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.leftboundry.pointnum, _x.rightboundry.type, _x.rightboundry.linetype))
      for val1 in self.rightboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_hdB3hd().pack(_x.rightboundry.pointnum, _x.width, _x.IsPartofRouting, _x.type, _x.direction, _x.id, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.centerline is None:
        self.centerline = ytthdmap_msgs.msg.S_LINE()
      if self.leftboundry is None:
        self.leftboundry = ytthdmap_msgs.msg.S_LINE()
      if self.rightboundry is None:
        self.rightboundry = ytthdmap_msgs.msg.S_LINE()
      end = 0
      _x = self
      start = end
      end += 4
      (_x.centerline.type, _x.centerline.linetype,) = _get_struct_2h().unpack(str[start:end])
      self.centerline.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.centerline.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.centerline.pointnum, _x.leftboundry.type, _x.leftboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.leftboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.leftboundry.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.leftboundry.pointnum, _x.rightboundry.type, _x.rightboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.rightboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.rightboundry.point.append(val1)
      _x = self
      start = end
      end += 25
      (_x.rightboundry.pointnum, _x.width, _x.IsPartofRouting, _x.type, _x.direction, _x.id, _x.length,) = _get_struct_hdB3hd().unpack(str[start:end])
      self.IsPartofRouting = bool(self.IsPartofRouting)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h().pack(_x.centerline.type, _x.centerline.linetype))
      for val1 in self.centerline.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.centerline.pointnum, _x.leftboundry.type, _x.leftboundry.linetype))
      for val1 in self.leftboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3h().pack(_x.leftboundry.pointnum, _x.rightboundry.type, _x.rightboundry.linetype))
      for val1 in self.rightboundry.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_hdB3hd().pack(_x.rightboundry.pointnum, _x.width, _x.IsPartofRouting, _x.type, _x.direction, _x.id, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.centerline is None:
        self.centerline = ytthdmap_msgs.msg.S_LINE()
      if self.leftboundry is None:
        self.leftboundry = ytthdmap_msgs.msg.S_LINE()
      if self.rightboundry is None:
        self.rightboundry = ytthdmap_msgs.msg.S_LINE()
      end = 0
      _x = self
      start = end
      end += 4
      (_x.centerline.type, _x.centerline.linetype,) = _get_struct_2h().unpack(str[start:end])
      self.centerline.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.centerline.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.centerline.pointnum, _x.leftboundry.type, _x.leftboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.leftboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.leftboundry.point.append(val1)
      _x = self
      start = end
      end += 6
      (_x.leftboundry.pointnum, _x.rightboundry.type, _x.rightboundry.linetype,) = _get_struct_3h().unpack(str[start:end])
      self.rightboundry.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.rightboundry.point.append(val1)
      _x = self
      start = end
      end += 25
      (_x.rightboundry.pointnum, _x.width, _x.IsPartofRouting, _x.type, _x.direction, _x.id, _x.length,) = _get_struct_hdB3hd().unpack(str[start:end])
      self.IsPartofRouting = bool(self.IsPartofRouting)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_hdB3hd = None
def _get_struct_hdB3hd():
    global _struct_hdB3hd
    if _struct_hdB3hd is None:
        _struct_hdB3hd = struct.Struct("<hdB3hd")
    return _struct_hdB3hd
_struct_3h = None
def _get_struct_3h():
    global _struct_3h
    if _struct_3h is None:
        _struct_3h = struct.Struct("<3h")
    return _struct_3h
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
