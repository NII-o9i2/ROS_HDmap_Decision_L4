# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ytthdmap_msgs/S_LINE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ytthdmap_msgs.msg

class S_LINE(genpy.Message):
  _md5sum = "33dad250dabe5dc1f0d3a753aa379102"
  _type = "ytthdmap_msgs/S_LINE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 type
int16[100] linetype
S_POINT[100] point
int16 pointnum

================================================================================
MSG: ytthdmap_msgs/S_POINT
float32 x
float32 y
float32 z
"""
  __slots__ = ['type','linetype','point','pointnum']
  _slot_types = ['int16','int16[100]','ytthdmap_msgs/S_POINT[100]','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,linetype,point,pointnum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(S_LINE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.linetype is None:
        self.linetype = [0] * 100
      if self.point is None:
        self.point = [ytthdmap_msgs.msg.S_POINT() for _ in range(100)]
      if self.pointnum is None:
        self.pointnum = 0
    else:
      self.type = 0
      self.linetype = [0] * 100
      self.point = [ytthdmap_msgs.msg.S_POINT() for _ in range(100)]
      self.pointnum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_h().pack(self.type))
      buff.write(_get_struct_100h().pack(*self.linetype))
      for val1 in self.point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_h().pack(self.pointnum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = None
      end = 0
      start = end
      end += 2
      (self.type,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 200
      self.linetype = _get_struct_100h().unpack(str[start:end])
      self.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.point.append(val1)
      start = end
      end += 2
      (self.pointnum,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_h().pack(self.type))
      buff.write(self.linetype.tostring())
      for val1 in self.point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_h().pack(self.pointnum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = None
      end = 0
      start = end
      end += 2
      (self.type,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 200
      self.linetype = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=100)
      self.point = []
      for i in range(0, 100):
        val1 = ytthdmap_msgs.msg.S_POINT()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.point.append(val1)
      start = end
      end += 2
      (self.pointnum,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_100h = None
def _get_struct_100h():
    global _struct_100h
    if _struct_100h is None:
        _struct_100h = struct.Struct("<100h")
    return _struct_100h
