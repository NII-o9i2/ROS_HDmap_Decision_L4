# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from leadgen_msgs/LeadgenTrajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import leadgen_msgs.msg
import std_msgs.msg

class LeadgenTrajectory(genpy.Message):
  _md5sum = "403d372ec69806b29a42abeb4348e3f0"
  _type = "leadgen_msgs/LeadgenTrajectory"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message is to describe the target trajectory for the vehicle
# The message is usually sent by planning module and followed by control module

# Header
std_msgs/Header header

# The target trajectory
LeadgenWaypoint[] waypoints

# emergency stop marker
bool estop

# turn light
uint8 turn_light

uint8 NO_TURN_LIGHT = 0
uint8 LEFT_TURN_LIGHT = 1
uint8 RIGHT_TURN_LIGHT = 2

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: leadgen_msgs/LeadgenWaypoint
# This message is to describe a WAYPOINT in the target trajectory

# header
# std_msgs/Header header

# 3D position
geometry_msgs/Point point

# trace info
float64 theta # the heading of the trace at this point
float64 kappa # the curvature of the trace at this point

# SL info
float64 station
float64 lateral

# speed info
float32 speed # in [m/s]
float32 accel # in [m/s^2],(optional)

time time_arrival # the expected arrival time of this point



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  NO_TURN_LIGHT = 0
  LEFT_TURN_LIGHT = 1
  RIGHT_TURN_LIGHT = 2

  __slots__ = ['header','waypoints','estop','turn_light']
  _slot_types = ['std_msgs/Header','leadgen_msgs/LeadgenWaypoint[]','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,waypoints,estop,turn_light

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LeadgenTrajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = []
      if self.estop is None:
        self.estop = False
      if self.turn_light is None:
        self.turn_light = 0
    else:
      self.header = std_msgs.msg.Header()
      self.waypoints = []
      self.estop = False
      self.turn_light = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4d2f().pack(_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel))
        _v2 = val1.time_arrival
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_2B().pack(_x.estop, _x.turn_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = leadgen_msgs.msg.LeadgenWaypoint()
        _v3 = val1.point
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel,) = _get_struct_4d2f().unpack(str[start:end])
        _v4 = val1.time_arrival
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.waypoints.append(val1)
      _x = self
      start = end
      end += 2
      (_x.estop, _x.turn_light,) = _get_struct_2B().unpack(str[start:end])
      self.estop = bool(self.estop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _v5 = val1.point
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_4d2f().pack(_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel))
        _v6 = val1.time_arrival
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_2B().pack(_x.estop, _x.turn_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = leadgen_msgs.msg.LeadgenWaypoint()
        _v7 = val1.point
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel,) = _get_struct_4d2f().unpack(str[start:end])
        _v8 = val1.time_arrival
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.waypoints.append(val1)
      _x = self
      start = end
      end += 2
      (_x.estop, _x.turn_light,) = _get_struct_2B().unpack(str[start:end])
      self.estop = bool(self.estop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d2f = None
def _get_struct_4d2f():
    global _struct_4d2f
    if _struct_4d2f is None:
        _struct_4d2f = struct.Struct("<4d2f")
    return _struct_4d2f
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
