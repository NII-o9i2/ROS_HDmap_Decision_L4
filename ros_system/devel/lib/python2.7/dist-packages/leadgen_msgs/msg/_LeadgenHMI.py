# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from leadgen_msgs/LeadgenHMI.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import leadgen_msgs.msg
import std_msgs.msg

class LeadgenHMI(genpy.Message):
  _md5sum = "0d84c81bb319da0c42ae894c7b0cac72"
  _type = "leadgen_msgs/LeadgenHMI"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message is to describe decistion and planning message for HMI

# Header
std_msgs/Header header

# lane changing decisions
uint8 lane_decision

# enum for lane decisions
uint8 KEEP_IN_LANE = 0
uint8 MERGE_LEFT_LANE = 1
uint8 MERGE_RIGHT_LANE = 2

# traffic light result
uint8 traffic_light_result

# enum for traffic light result
uint8 TRAFFIC_LIGHT_NA = 0
uint8 TRAFFIC_LIGHT_RED = 1
uint8 TRAFFIC_LIGHT_GREEN = 2

# current lane limit speed
float32 lane_speed_limit # km/h

# lane borders
LeadgenPointArray[] lane_borders

# obstacle output
LeadgenObstacleOutput[] obs_decision_result




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: leadgen_msgs/LeadgenPointArray
# This message is to describe an array of geometry_msgs/Point

geometry_msgs/Point[] points

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: leadgen_msgs/LeadgenObstacleOutput
# This message is to describe the information of an obstacle

# Header
std_msgs/Header header

# obstacle ID number
int32 id

# obstacle detection sources(optional)
uint16 source_sensor

# obstacle source sensor definition, using bit-wise operations
# A single obstacle can be detected by multiple sensors, and use OR operation as the result
uint16 SENSOR_LIDAR = 1
uint16 SENSOR_VISION = 2
uint16 SENSOR_RADAR = 4

# obstacle type(optional)
uint8 type

# obstacle type definitions
# subject to change

uint8 OBSTACLE_TYPE_UNKNOWN = 0
uint8 OBSTACLE_TYPE_SMALL = 1
uint8 OBSTACLE_TYPE_BIG = 2
uint8 OBSTACLE_TYPE_CAR = 3
uint8 OBSTACLE_TYPE_BUS = 4
uint8 OBSTACLE_TYPE_TRUCK = 5
uint8 OBSTACLE_TYPE_CYCLER = 6
uint8 OBSTACLE_TYPE_PEDESTRIAN = 7
uint8 OBSTACLE_TYPE_PLANT = 8
uint8 OBSTACLE_TYPE_FENCE = 9

# obstacle status(optional)
uint8 status

# obstacle status definitions
# according to Mobileye specs
uint8 OBSTACLE_STATUS_UNDEFINED = 0
uint8 OBSTACLE_STATUS_STANDING = 1
uint8 OBSTACLE_STATUS_STOPPED = 2
uint8 OBSTACLE_STATUS_MOVING = 3
uint8 OBSTACLE_STATUS_ONCOMING = 4
uint8 OBSTACLE_STATUS_PARKED = 5
uint8 OBSTACLE_STATUS_UNUSED = 6

# obstacle cutting(optional)
uint8 cutting

# obstacle cutting definitions
# according to Mobileye specs
uint8 OBSTACLE_CUTTING_UNDEFINED = 0
uint8 OBSTACLE_IN_HOST_LANE = 1
uint8 OBSTACLE_OUT_HOST_LANE = 2
uint8 OBSTACLE_CUTTING_IN = 3
uint8 OBSTACLE_CUTTING_OUT = 4

# obstacle size
float32 length  # along obstacle's +x direction, in [m] meter
float32 width   # along obstacle's +y direction, in [m]
float32 height  # along obstacle's +z direction, in [m]

float32 velocity_heading # the velocity heading in the world frame

# obstacle pose in body frame
bool rlt_valid  # relative information valid
geometry_msgs/Point rlt_position    # relative position to body frame
float32 rlt_theta   # relative theta angle, to body frame along z axis

# obstacle velocity in body frame
geometry_msgs/Vector3 rlt_velocity  # relative velocity to body frame 

# obstacle pose in world frame
bool abs_valid  # absolute information valid
geometry_msgs/Point abs_position    # absolute position in world frame
float32 abs_theta   # absolute yaw angle in world frame

# obstacle velocity in world frame
geometry_msgs/Vector3 abs_velocity  # absolute velocity in world frame

# decision tags
uint8 longitude_tag
uint8 lateral_tag

# decision tag definitions
uint8 IGNORE = 0 
uint8 STAY_BEHIND = 1

uint8 NUDGE_LEFT = 2   
uint8 NUDGE_RIGHT = 3 
uint8 NOT_AVAILABLE = 4 

LeadgenWaypoint[] predicted_traj
float32 predicted_period


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: leadgen_msgs/LeadgenWaypoint
# This message is to describe a WAYPOINT in the target trajectory

# header
# std_msgs/Header header

# 3D position
geometry_msgs/Point point

# trace info
float64 theta # the heading of the trace at this point
float64 kappa # the curvature of the trace at this point

# SL info
float64 station
float64 lateral

# speed info
float32 speed # in [m/s]
float32 accel # in [m/s^2],(optional)

time time_arrival # the expected arrival time of this point


"""
  # Pseudo-constants
  KEEP_IN_LANE = 0
  MERGE_LEFT_LANE = 1
  MERGE_RIGHT_LANE = 2
  TRAFFIC_LIGHT_NA = 0
  TRAFFIC_LIGHT_RED = 1
  TRAFFIC_LIGHT_GREEN = 2

  __slots__ = ['header','lane_decision','traffic_light_result','lane_speed_limit','lane_borders','obs_decision_result']
  _slot_types = ['std_msgs/Header','uint8','uint8','float32','leadgen_msgs/LeadgenPointArray[]','leadgen_msgs/LeadgenObstacleOutput[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lane_decision,traffic_light_result,lane_speed_limit,lane_borders,obs_decision_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LeadgenHMI, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_decision is None:
        self.lane_decision = 0
      if self.traffic_light_result is None:
        self.traffic_light_result = 0
      if self.lane_speed_limit is None:
        self.lane_speed_limit = 0.
      if self.lane_borders is None:
        self.lane_borders = []
      if self.obs_decision_result is None:
        self.obs_decision_result = []
    else:
      self.header = std_msgs.msg.Header()
      self.lane_decision = 0
      self.traffic_light_result = 0
      self.lane_speed_limit = 0.
      self.lane_borders = []
      self.obs_decision_result = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.lane_decision, _x.traffic_light_result, _x.lane_speed_limit))
      length = len(self.lane_borders)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_borders:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.obs_decision_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.obs_decision_result:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_iH3B4fB().pack(_x.id, _x.source_sensor, _x.type, _x.status, _x.cutting, _x.length, _x.width, _x.height, _x.velocity_heading, _x.rlt_valid))
        _v3 = val1.rlt_position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(val1.rlt_theta))
        _v4 = val1.rlt_velocity
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_B().pack(val1.abs_valid))
        _v5 = val1.abs_position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(val1.abs_theta))
        _v6 = val1.abs_velocity
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.longitude_tag, _x.lateral_tag))
        length = len(val1.predicted_traj)
        buff.write(_struct_I.pack(length))
        for val2 in val1.predicted_traj:
          _v7 = val2.point
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_4d2f().pack(_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel))
          _v8 = val2.time_arrival
          _x = _v8
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_f().pack(val1.predicted_period))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_borders is None:
        self.lane_borders = None
      if self.obs_decision_result is None:
        self.obs_decision_result = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.lane_decision, _x.traffic_light_result, _x.lane_speed_limit,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_borders = []
      for i in range(0, length):
        val1 = leadgen_msgs.msg.LeadgenPointArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.points.append(val2)
        self.lane_borders.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obs_decision_result = []
      for i in range(0, length):
        val1 = leadgen_msgs.msg.LeadgenObstacleOutput()
        _v9 = val1.header
        start = end
        end += 4
        (_v9.seq,) = _get_struct_I().unpack(str[start:end])
        _v10 = _v9.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.frame_id = str[start:end].decode('utf-8')
        else:
          _v9.frame_id = str[start:end]
        _x = val1
        start = end
        end += 26
        (_x.id, _x.source_sensor, _x.type, _x.status, _x.cutting, _x.length, _x.width, _x.height, _x.velocity_heading, _x.rlt_valid,) = _get_struct_iH3B4fB().unpack(str[start:end])
        val1.rlt_valid = bool(val1.rlt_valid)
        _v11 = val1.rlt_position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.rlt_theta,) = _get_struct_f().unpack(str[start:end])
        _v12 = val1.rlt_velocity
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.abs_valid,) = _get_struct_B().unpack(str[start:end])
        val1.abs_valid = bool(val1.abs_valid)
        _v13 = val1.abs_position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.abs_theta,) = _get_struct_f().unpack(str[start:end])
        _v14 = val1.abs_velocity
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.longitude_tag, _x.lateral_tag,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.predicted_traj = []
        for i in range(0, length):
          val2 = leadgen_msgs.msg.LeadgenWaypoint()
          _v15 = val2.point
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 40
          (_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel,) = _get_struct_4d2f().unpack(str[start:end])
          _v16 = val2.time_arrival
          _x = _v16
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          val1.predicted_traj.append(val2)
        start = end
        end += 4
        (val1.predicted_period,) = _get_struct_f().unpack(str[start:end])
        self.obs_decision_result.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.lane_decision, _x.traffic_light_result, _x.lane_speed_limit))
      length = len(self.lane_borders)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_borders:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.obs_decision_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.obs_decision_result:
        _v17 = val1.header
        buff.write(_get_struct_I().pack(_v17.seq))
        _v18 = _v17.stamp
        _x = _v18
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v17.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_iH3B4fB().pack(_x.id, _x.source_sensor, _x.type, _x.status, _x.cutting, _x.length, _x.width, _x.height, _x.velocity_heading, _x.rlt_valid))
        _v19 = val1.rlt_position
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(val1.rlt_theta))
        _v20 = val1.rlt_velocity
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_B().pack(val1.abs_valid))
        _v21 = val1.abs_position
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(val1.abs_theta))
        _v22 = val1.abs_velocity
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.longitude_tag, _x.lateral_tag))
        length = len(val1.predicted_traj)
        buff.write(_struct_I.pack(length))
        for val2 in val1.predicted_traj:
          _v23 = val2.point
          _x = _v23
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_4d2f().pack(_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel))
          _v24 = val2.time_arrival
          _x = _v24
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_f().pack(val1.predicted_period))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_borders is None:
        self.lane_borders = None
      if self.obs_decision_result is None:
        self.obs_decision_result = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.lane_decision, _x.traffic_light_result, _x.lane_speed_limit,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_borders = []
      for i in range(0, length):
        val1 = leadgen_msgs.msg.LeadgenPointArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.points.append(val2)
        self.lane_borders.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obs_decision_result = []
      for i in range(0, length):
        val1 = leadgen_msgs.msg.LeadgenObstacleOutput()
        _v25 = val1.header
        start = end
        end += 4
        (_v25.seq,) = _get_struct_I().unpack(str[start:end])
        _v26 = _v25.stamp
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v25.frame_id = str[start:end].decode('utf-8')
        else:
          _v25.frame_id = str[start:end]
        _x = val1
        start = end
        end += 26
        (_x.id, _x.source_sensor, _x.type, _x.status, _x.cutting, _x.length, _x.width, _x.height, _x.velocity_heading, _x.rlt_valid,) = _get_struct_iH3B4fB().unpack(str[start:end])
        val1.rlt_valid = bool(val1.rlt_valid)
        _v27 = val1.rlt_position
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.rlt_theta,) = _get_struct_f().unpack(str[start:end])
        _v28 = val1.rlt_velocity
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.abs_valid,) = _get_struct_B().unpack(str[start:end])
        val1.abs_valid = bool(val1.abs_valid)
        _v29 = val1.abs_position
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.abs_theta,) = _get_struct_f().unpack(str[start:end])
        _v30 = val1.abs_velocity
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.longitude_tag, _x.lateral_tag,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.predicted_traj = []
        for i in range(0, length):
          val2 = leadgen_msgs.msg.LeadgenWaypoint()
          _v31 = val2.point
          _x = _v31
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 40
          (_x.theta, _x.kappa, _x.station, _x.lateral, _x.speed, _x.accel,) = _get_struct_4d2f().unpack(str[start:end])
          _v32 = val2.time_arrival
          _x = _v32
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          val1.predicted_traj.append(val2)
        start = end
        end += 4
        (val1.predicted_period,) = _get_struct_f().unpack(str[start:end])
        self.obs_decision_result.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_4d2f = None
def _get_struct_4d2f():
    global _struct_4d2f
    if _struct_4d2f is None:
        _struct_4d2f = struct.Struct("<4d2f")
    return _struct_4d2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_iH3B4fB = None
def _get_struct_iH3B4fB():
    global _struct_iH3B4fB
    if _struct_iH3B4fB is None:
        _struct_iH3B4fB = struct.Struct("<iH3B4fB")
    return _struct_iH3B4fB
_struct_2Bf = None
def _get_struct_2Bf():
    global _struct_2Bf
    if _struct_2Bf is None:
        _struct_2Bf = struct.Struct("<2Bf")
    return _struct_2Bf
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
