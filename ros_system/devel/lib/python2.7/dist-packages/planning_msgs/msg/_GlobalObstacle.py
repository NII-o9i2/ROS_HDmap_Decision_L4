# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/GlobalObstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GlobalObstacle(genpy.Message):
  _md5sum = "b7d3afddcf69de81cf0f9f41ad80e5fa"
  _type = "planning_msgs/GlobalObstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 enu_x
float32 enu_y
float32 enu_theta
float32 enu_vx
float32 enu_vy
float32 enu_ax
float32 enu_ay
float32 confidence
int8 type
float32 velocity
float32 length
float32 width
"""
  __slots__ = ['enu_x','enu_y','enu_theta','enu_vx','enu_vy','enu_ax','enu_ay','confidence','type','velocity','length','width']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','int8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enu_x,enu_y,enu_theta,enu_vx,enu_vy,enu_ax,enu_ay,confidence,type,velocity,length,width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalObstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enu_x is None:
        self.enu_x = 0.
      if self.enu_y is None:
        self.enu_y = 0.
      if self.enu_theta is None:
        self.enu_theta = 0.
      if self.enu_vx is None:
        self.enu_vx = 0.
      if self.enu_vy is None:
        self.enu_vy = 0.
      if self.enu_ax is None:
        self.enu_ax = 0.
      if self.enu_ay is None:
        self.enu_ay = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.type is None:
        self.type = 0
      if self.velocity is None:
        self.velocity = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
    else:
      self.enu_x = 0.
      self.enu_y = 0.
      self.enu_theta = 0.
      self.enu_vx = 0.
      self.enu_vy = 0.
      self.enu_ax = 0.
      self.enu_ay = 0.
      self.confidence = 0.
      self.type = 0
      self.velocity = 0.
      self.length = 0.
      self.width = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8fb3f().pack(_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width,) = _get_struct_8fb3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8fb3f().pack(_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width,) = _get_struct_8fb3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fb3f = None
def _get_struct_8fb3f():
    global _struct_8fb3f
    if _struct_8fb3f is None:
        _struct_8fb3f = struct.Struct("<8fb3f")
    return _struct_8fb3f
