# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/ADCTrajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planning_msgs.msg
import std_msgs.msg

class ADCTrajectory(genpy.Message):
  _md5sum = "a6c0f4e599aa65a91923e94a4414cf84"
  _type = "planning_msgs/ADCTrajectory"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
PathPoint[] path_point
float32 dis_to_end
float32 dis_to_cip
bool estop
bool is_replan
uint8 gear_position
uint8 turn_signal
LatencyStats latency_stats
PredictionDebug predict_debug

# Gear Position
uint8 GEAR_NEUTRAL=0
uint8 GEAR_DRIVE=1
uint8 GEAR_REVERSE=2
uint8 GEAR_PARKING=3
uint8 GEAR_INVALID=4

# turn signal state
uint8 TURN_NONE=0
uint8 TURN_LEFT=1
uint8 TURN_RIGHT=2

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: planning_msgs/PathPoint
float64 time
float64 x
float64 y
float64 z
float64 theta
float64 curvature
float64 curv_rate
float32 velocity 
float32 acceleration 
float32 s
float32 l

================================================================================
MSG: planning_msgs/LatencyStats
float64 total_time_ms
float64 init_frame_time_ms

================================================================================
MSG: planning_msgs/PredictionDebug
Propt[32] propt
ObstaclePred[64] obstacle_pred
GlobalObstacle[32] obstacle_glbl

================================================================================
MSG: planning_msgs/Propt
float32 frenet_l
float32 frenet_s
float32 angle_diff

================================================================================
MSG: planning_msgs/ObstaclePred
float32[10] prediction_x
float32[10] prediction_y
uint32 predict_method
bool is_valid

================================================================================
MSG: planning_msgs/GlobalObstacle
float32 enu_x
float32 enu_y
float32 enu_theta
float32 enu_vx
float32 enu_vy
float32 enu_ax
float32 enu_ay
float32 confidence
int8 type
float32 velocity
float32 length
float32 width
"""
  # Pseudo-constants
  GEAR_NEUTRAL = 0
  GEAR_DRIVE = 1
  GEAR_REVERSE = 2
  GEAR_PARKING = 3
  GEAR_INVALID = 4
  TURN_NONE = 0
  TURN_LEFT = 1
  TURN_RIGHT = 2

  __slots__ = ['header','path_point','dis_to_end','dis_to_cip','estop','is_replan','gear_position','turn_signal','latency_stats','predict_debug']
  _slot_types = ['std_msgs/Header','planning_msgs/PathPoint[]','float32','float32','bool','bool','uint8','uint8','planning_msgs/LatencyStats','planning_msgs/PredictionDebug']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,path_point,dis_to_end,dis_to_cip,estop,is_replan,gear_position,turn_signal,latency_stats,predict_debug

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADCTrajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.path_point is None:
        self.path_point = []
      if self.dis_to_end is None:
        self.dis_to_end = 0.
      if self.dis_to_cip is None:
        self.dis_to_cip = 0.
      if self.estop is None:
        self.estop = False
      if self.is_replan is None:
        self.is_replan = False
      if self.gear_position is None:
        self.gear_position = 0
      if self.turn_signal is None:
        self.turn_signal = 0
      if self.latency_stats is None:
        self.latency_stats = planning_msgs.msg.LatencyStats()
      if self.predict_debug is None:
        self.predict_debug = planning_msgs.msg.PredictionDebug()
    else:
      self.header = std_msgs.msg.Header()
      self.path_point = []
      self.dis_to_end = 0.
      self.dis_to_cip = 0.
      self.estop = False
      self.is_replan = False
      self.gear_position = 0
      self.turn_signal = 0
      self.latency_stats = planning_msgs.msg.LatencyStats()
      self.predict_debug = planning_msgs.msg.PredictionDebug()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.path_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_point:
        _x = val1
        buff.write(_get_struct_7d4f().pack(_x.time, _x.x, _x.y, _x.z, _x.theta, _x.curvature, _x.curv_rate, _x.velocity, _x.acceleration, _x.s, _x.l))
      _x = self
      buff.write(_get_struct_2f4B2d().pack(_x.dis_to_end, _x.dis_to_cip, _x.estop, _x.is_replan, _x.gear_position, _x.turn_signal, _x.latency_stats.total_time_ms, _x.latency_stats.init_frame_time_ms))
      for val1 in self.predict_debug.propt:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.frenet_l, _x.frenet_s, _x.angle_diff))
      for val1 in self.predict_debug.obstacle_pred:
        buff.write(_get_struct_10f().pack(*val1.prediction_x))
        buff.write(_get_struct_10f().pack(*val1.prediction_y))
        _x = val1
        buff.write(_get_struct_IB().pack(_x.predict_method, _x.is_valid))
      for val1 in self.predict_debug.obstacle_glbl:
        _x = val1
        buff.write(_get_struct_8fb3f().pack(_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.path_point is None:
        self.path_point = None
      if self.latency_stats is None:
        self.latency_stats = planning_msgs.msg.LatencyStats()
      if self.predict_debug is None:
        self.predict_debug = planning_msgs.msg.PredictionDebug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_point = []
      for i in range(0, length):
        val1 = planning_msgs.msg.PathPoint()
        _x = val1
        start = end
        end += 72
        (_x.time, _x.x, _x.y, _x.z, _x.theta, _x.curvature, _x.curv_rate, _x.velocity, _x.acceleration, _x.s, _x.l,) = _get_struct_7d4f().unpack(str[start:end])
        self.path_point.append(val1)
      _x = self
      start = end
      end += 28
      (_x.dis_to_end, _x.dis_to_cip, _x.estop, _x.is_replan, _x.gear_position, _x.turn_signal, _x.latency_stats.total_time_ms, _x.latency_stats.init_frame_time_ms,) = _get_struct_2f4B2d().unpack(str[start:end])
      self.estop = bool(self.estop)
      self.is_replan = bool(self.is_replan)
      self.predict_debug.propt = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.Propt()
        _x = val1
        start = end
        end += 12
        (_x.frenet_l, _x.frenet_s, _x.angle_diff,) = _get_struct_3f().unpack(str[start:end])
        self.predict_debug.propt.append(val1)
      self.predict_debug.obstacle_pred = []
      for i in range(0, 64):
        val1 = planning_msgs.msg.ObstaclePred()
        start = end
        end += 40
        val1.prediction_x = _get_struct_10f().unpack(str[start:end])
        start = end
        end += 40
        val1.prediction_y = _get_struct_10f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.predict_method, _x.is_valid,) = _get_struct_IB().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        self.predict_debug.obstacle_pred.append(val1)
      self.predict_debug.obstacle_glbl = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.GlobalObstacle()
        _x = val1
        start = end
        end += 45
        (_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width,) = _get_struct_8fb3f().unpack(str[start:end])
        self.predict_debug.obstacle_glbl.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.path_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_point:
        _x = val1
        buff.write(_get_struct_7d4f().pack(_x.time, _x.x, _x.y, _x.z, _x.theta, _x.curvature, _x.curv_rate, _x.velocity, _x.acceleration, _x.s, _x.l))
      _x = self
      buff.write(_get_struct_2f4B2d().pack(_x.dis_to_end, _x.dis_to_cip, _x.estop, _x.is_replan, _x.gear_position, _x.turn_signal, _x.latency_stats.total_time_ms, _x.latency_stats.init_frame_time_ms))
      for val1 in self.predict_debug.propt:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.frenet_l, _x.frenet_s, _x.angle_diff))
      for val1 in self.predict_debug.obstacle_pred:
        buff.write(val1.prediction_x.tostring())
        buff.write(val1.prediction_y.tostring())
        _x = val1
        buff.write(_get_struct_IB().pack(_x.predict_method, _x.is_valid))
      for val1 in self.predict_debug.obstacle_glbl:
        _x = val1
        buff.write(_get_struct_8fb3f().pack(_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.path_point is None:
        self.path_point = None
      if self.latency_stats is None:
        self.latency_stats = planning_msgs.msg.LatencyStats()
      if self.predict_debug is None:
        self.predict_debug = planning_msgs.msg.PredictionDebug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_point = []
      for i in range(0, length):
        val1 = planning_msgs.msg.PathPoint()
        _x = val1
        start = end
        end += 72
        (_x.time, _x.x, _x.y, _x.z, _x.theta, _x.curvature, _x.curv_rate, _x.velocity, _x.acceleration, _x.s, _x.l,) = _get_struct_7d4f().unpack(str[start:end])
        self.path_point.append(val1)
      _x = self
      start = end
      end += 28
      (_x.dis_to_end, _x.dis_to_cip, _x.estop, _x.is_replan, _x.gear_position, _x.turn_signal, _x.latency_stats.total_time_ms, _x.latency_stats.init_frame_time_ms,) = _get_struct_2f4B2d().unpack(str[start:end])
      self.estop = bool(self.estop)
      self.is_replan = bool(self.is_replan)
      self.predict_debug.propt = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.Propt()
        _x = val1
        start = end
        end += 12
        (_x.frenet_l, _x.frenet_s, _x.angle_diff,) = _get_struct_3f().unpack(str[start:end])
        self.predict_debug.propt.append(val1)
      self.predict_debug.obstacle_pred = []
      for i in range(0, 64):
        val1 = planning_msgs.msg.ObstaclePred()
        start = end
        end += 40
        val1.prediction_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
        start = end
        end += 40
        val1.prediction_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
        _x = val1
        start = end
        end += 5
        (_x.predict_method, _x.is_valid,) = _get_struct_IB().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        self.predict_debug.obstacle_pred.append(val1)
      self.predict_debug.obstacle_glbl = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.GlobalObstacle()
        _x = val1
        start = end
        end += 45
        (_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width,) = _get_struct_8fb3f().unpack(str[start:end])
        self.predict_debug.obstacle_glbl.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fb3f = None
def _get_struct_8fb3f():
    global _struct_8fb3f
    if _struct_8fb3f is None:
        _struct_8fb3f = struct.Struct("<8fb3f")
    return _struct_8fb3f
_struct_7d4f = None
def _get_struct_7d4f():
    global _struct_7d4f
    if _struct_7d4f is None:
        _struct_7d4f = struct.Struct("<7d4f")
    return _struct_7d4f
_struct_2f4B2d = None
def _get_struct_2f4B2d():
    global _struct_2f4B2d
    if _struct_2f4B2d is None:
        _struct_2f4B2d = struct.Struct("<2f4B2d")
    return _struct_2f4B2d
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
