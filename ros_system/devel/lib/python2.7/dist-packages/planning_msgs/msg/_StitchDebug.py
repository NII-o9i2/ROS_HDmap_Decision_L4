# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/StitchDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StitchDebug(genpy.Message):
  _md5sum = "dbce74fa73b1745ccd5e3c75b3d544b6"
  _type = "planning_msgs/StitchDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """  bool prev_traj_is_not_ok
  bool driver_mode_is_not_auto
  bool prev_traj_size_is_zero
  bool smaller_than_prev_traj_time
  bool beyond_prev_traj_time
  bool dist_too_large
  float32 lon_diff
  float32 lat_diff"""
  __slots__ = ['prev_traj_is_not_ok','driver_mode_is_not_auto','prev_traj_size_is_zero','smaller_than_prev_traj_time','beyond_prev_traj_time','dist_too_large','lon_diff','lat_diff']
  _slot_types = ['bool','bool','bool','bool','bool','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prev_traj_is_not_ok,driver_mode_is_not_auto,prev_traj_size_is_zero,smaller_than_prev_traj_time,beyond_prev_traj_time,dist_too_large,lon_diff,lat_diff

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StitchDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prev_traj_is_not_ok is None:
        self.prev_traj_is_not_ok = False
      if self.driver_mode_is_not_auto is None:
        self.driver_mode_is_not_auto = False
      if self.prev_traj_size_is_zero is None:
        self.prev_traj_size_is_zero = False
      if self.smaller_than_prev_traj_time is None:
        self.smaller_than_prev_traj_time = False
      if self.beyond_prev_traj_time is None:
        self.beyond_prev_traj_time = False
      if self.dist_too_large is None:
        self.dist_too_large = False
      if self.lon_diff is None:
        self.lon_diff = 0.
      if self.lat_diff is None:
        self.lat_diff = 0.
    else:
      self.prev_traj_is_not_ok = False
      self.driver_mode_is_not_auto = False
      self.prev_traj_size_is_zero = False
      self.smaller_than_prev_traj_time = False
      self.beyond_prev_traj_time = False
      self.dist_too_large = False
      self.lon_diff = 0.
      self.lat_diff = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B2f().pack(_x.prev_traj_is_not_ok, _x.driver_mode_is_not_auto, _x.prev_traj_size_is_zero, _x.smaller_than_prev_traj_time, _x.beyond_prev_traj_time, _x.dist_too_large, _x.lon_diff, _x.lat_diff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.prev_traj_is_not_ok, _x.driver_mode_is_not_auto, _x.prev_traj_size_is_zero, _x.smaller_than_prev_traj_time, _x.beyond_prev_traj_time, _x.dist_too_large, _x.lon_diff, _x.lat_diff,) = _get_struct_6B2f().unpack(str[start:end])
      self.prev_traj_is_not_ok = bool(self.prev_traj_is_not_ok)
      self.driver_mode_is_not_auto = bool(self.driver_mode_is_not_auto)
      self.prev_traj_size_is_zero = bool(self.prev_traj_size_is_zero)
      self.smaller_than_prev_traj_time = bool(self.smaller_than_prev_traj_time)
      self.beyond_prev_traj_time = bool(self.beyond_prev_traj_time)
      self.dist_too_large = bool(self.dist_too_large)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B2f().pack(_x.prev_traj_is_not_ok, _x.driver_mode_is_not_auto, _x.prev_traj_size_is_zero, _x.smaller_than_prev_traj_time, _x.beyond_prev_traj_time, _x.dist_too_large, _x.lon_diff, _x.lat_diff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.prev_traj_is_not_ok, _x.driver_mode_is_not_auto, _x.prev_traj_size_is_zero, _x.smaller_than_prev_traj_time, _x.beyond_prev_traj_time, _x.dist_too_large, _x.lon_diff, _x.lat_diff,) = _get_struct_6B2f().unpack(str[start:end])
      self.prev_traj_is_not_ok = bool(self.prev_traj_is_not_ok)
      self.driver_mode_is_not_auto = bool(self.driver_mode_is_not_auto)
      self.prev_traj_size_is_zero = bool(self.prev_traj_size_is_zero)
      self.smaller_than_prev_traj_time = bool(self.smaller_than_prev_traj_time)
      self.beyond_prev_traj_time = bool(self.beyond_prev_traj_time)
      self.dist_too_large = bool(self.dist_too_large)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B2f = None
def _get_struct_6B2f():
    global _struct_6B2f
    if _struct_6B2f is None:
        _struct_6B2f = struct.Struct("<6B2f")
    return _struct_6B2f
