# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/PredictionDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planning_msgs.msg

class PredictionDebug(genpy.Message):
  _md5sum = "3d3465080864d10f01de4bdd96ef7bc1"
  _type = "planning_msgs/PredictionDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Propt[32] propt
ObstaclePred[64] obstacle_pred
GlobalObstacle[32] obstacle_glbl

================================================================================
MSG: planning_msgs/Propt
float32 frenet_l
float32 frenet_s
float32 angle_diff

================================================================================
MSG: planning_msgs/ObstaclePred
float32[10] prediction_x
float32[10] prediction_y
uint32 predict_method
bool is_valid

================================================================================
MSG: planning_msgs/GlobalObstacle
float32 enu_x
float32 enu_y
float32 enu_theta
float32 enu_vx
float32 enu_vy
float32 enu_ax
float32 enu_ay
float32 confidence
int8 type
float32 velocity
float32 length
float32 width
"""
  __slots__ = ['propt','obstacle_pred','obstacle_glbl']
  _slot_types = ['planning_msgs/Propt[32]','planning_msgs/ObstaclePred[64]','planning_msgs/GlobalObstacle[32]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       propt,obstacle_pred,obstacle_glbl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictionDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.propt is None:
        self.propt = [planning_msgs.msg.Propt() for _ in range(32)]
      if self.obstacle_pred is None:
        self.obstacle_pred = [planning_msgs.msg.ObstaclePred() for _ in range(64)]
      if self.obstacle_glbl is None:
        self.obstacle_glbl = [planning_msgs.msg.GlobalObstacle() for _ in range(32)]
    else:
      self.propt = [planning_msgs.msg.Propt() for _ in range(32)]
      self.obstacle_pred = [planning_msgs.msg.ObstaclePred() for _ in range(64)]
      self.obstacle_glbl = [planning_msgs.msg.GlobalObstacle() for _ in range(32)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.propt:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.frenet_l, _x.frenet_s, _x.angle_diff))
      for val1 in self.obstacle_pred:
        buff.write(_get_struct_10f().pack(*val1.prediction_x))
        buff.write(_get_struct_10f().pack(*val1.prediction_y))
        _x = val1
        buff.write(_get_struct_IB().pack(_x.predict_method, _x.is_valid))
      for val1 in self.obstacle_glbl:
        _x = val1
        buff.write(_get_struct_8fb3f().pack(_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.propt is None:
        self.propt = None
      if self.obstacle_pred is None:
        self.obstacle_pred = None
      if self.obstacle_glbl is None:
        self.obstacle_glbl = None
      end = 0
      self.propt = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.Propt()
        _x = val1
        start = end
        end += 12
        (_x.frenet_l, _x.frenet_s, _x.angle_diff,) = _get_struct_3f().unpack(str[start:end])
        self.propt.append(val1)
      self.obstacle_pred = []
      for i in range(0, 64):
        val1 = planning_msgs.msg.ObstaclePred()
        start = end
        end += 40
        val1.prediction_x = _get_struct_10f().unpack(str[start:end])
        start = end
        end += 40
        val1.prediction_y = _get_struct_10f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.predict_method, _x.is_valid,) = _get_struct_IB().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        self.obstacle_pred.append(val1)
      self.obstacle_glbl = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.GlobalObstacle()
        _x = val1
        start = end
        end += 45
        (_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width,) = _get_struct_8fb3f().unpack(str[start:end])
        self.obstacle_glbl.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.propt:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.frenet_l, _x.frenet_s, _x.angle_diff))
      for val1 in self.obstacle_pred:
        buff.write(val1.prediction_x.tostring())
        buff.write(val1.prediction_y.tostring())
        _x = val1
        buff.write(_get_struct_IB().pack(_x.predict_method, _x.is_valid))
      for val1 in self.obstacle_glbl:
        _x = val1
        buff.write(_get_struct_8fb3f().pack(_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.propt is None:
        self.propt = None
      if self.obstacle_pred is None:
        self.obstacle_pred = None
      if self.obstacle_glbl is None:
        self.obstacle_glbl = None
      end = 0
      self.propt = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.Propt()
        _x = val1
        start = end
        end += 12
        (_x.frenet_l, _x.frenet_s, _x.angle_diff,) = _get_struct_3f().unpack(str[start:end])
        self.propt.append(val1)
      self.obstacle_pred = []
      for i in range(0, 64):
        val1 = planning_msgs.msg.ObstaclePred()
        start = end
        end += 40
        val1.prediction_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
        start = end
        end += 40
        val1.prediction_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
        _x = val1
        start = end
        end += 5
        (_x.predict_method, _x.is_valid,) = _get_struct_IB().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        self.obstacle_pred.append(val1)
      self.obstacle_glbl = []
      for i in range(0, 32):
        val1 = planning_msgs.msg.GlobalObstacle()
        _x = val1
        start = end
        end += 45
        (_x.enu_x, _x.enu_y, _x.enu_theta, _x.enu_vx, _x.enu_vy, _x.enu_ax, _x.enu_ay, _x.confidence, _x.type, _x.velocity, _x.length, _x.width,) = _get_struct_8fb3f().unpack(str[start:end])
        self.obstacle_glbl.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fb3f = None
def _get_struct_8fb3f():
    global _struct_8fb3f
    if _struct_8fb3f is None:
        _struct_8fb3f = struct.Struct("<8fb3f")
    return _struct_8fb3f
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
