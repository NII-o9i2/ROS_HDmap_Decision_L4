# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/PlanningDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planning_msgs.msg

class PlanningDebug(genpy.Message):
  _md5sum = "423e0926173cb1c4e4e0d32a68ecf81f"
  _type = "planning_msgs/PlanningDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 lon_objective_cost
float32 lon_jerk_cost
float32 lon_collision_cost
float32 lat_offset_cost
float32 centripental_acc_cost
float32 lat_comfort_cost
float32 constraint_check_failure_count
float32 collision_failure_count
float32 distance_planning
uint32 id_shown
uint32 flag_path_time_obstacle_sample_shown
float32 max_t
float32 max_d
float32 stitch_trajectory_x
float32 stitch_trajectory_y
float32 stitch_trajectory_z
float32 stitch_trajectory_theta
float32 stitch_trajectory_kappa
float32 stitch_trajectory_v
float32 stitch_trajectory_a
float32 stitch_trajectory_relative_time
StitchDebug stitch_debug
DecisionDebug decision_debug
================================================================================
MSG: planning_msgs/StitchDebug
  bool prev_traj_is_not_ok
  bool driver_mode_is_not_auto
  bool prev_traj_size_is_zero
  bool smaller_than_prev_traj_time
  bool beyond_prev_traj_time
  bool dist_too_large
  float32 lon_diff
  float32 lat_diff
================================================================================
MSG: planning_msgs/DecisionDebug
  ObstacleIn[50] obstacle
  int8 lanechange_id
  int8 lane_id
  float32[3] ego_cost
  int8[3] onlane_obs_num
  int8 lanechange_process

================================================================================
MSG: planning_msgs/ObstacleIn
int8 id
float32 s
float32 l
float32 vs
float32 as
float32 vl
float32 al
int8 lane_no
float32 time_cost
float32 des_cost
float32 decision_cost
int8 decision_tag
"""
  __slots__ = ['lon_objective_cost','lon_jerk_cost','lon_collision_cost','lat_offset_cost','centripental_acc_cost','lat_comfort_cost','constraint_check_failure_count','collision_failure_count','distance_planning','id_shown','flag_path_time_obstacle_sample_shown','max_t','max_d','stitch_trajectory_x','stitch_trajectory_y','stitch_trajectory_z','stitch_trajectory_theta','stitch_trajectory_kappa','stitch_trajectory_v','stitch_trajectory_a','stitch_trajectory_relative_time','stitch_debug','decision_debug']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','planning_msgs/StitchDebug','planning_msgs/DecisionDebug']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lon_objective_cost,lon_jerk_cost,lon_collision_cost,lat_offset_cost,centripental_acc_cost,lat_comfort_cost,constraint_check_failure_count,collision_failure_count,distance_planning,id_shown,flag_path_time_obstacle_sample_shown,max_t,max_d,stitch_trajectory_x,stitch_trajectory_y,stitch_trajectory_z,stitch_trajectory_theta,stitch_trajectory_kappa,stitch_trajectory_v,stitch_trajectory_a,stitch_trajectory_relative_time,stitch_debug,decision_debug

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lon_objective_cost is None:
        self.lon_objective_cost = 0.
      if self.lon_jerk_cost is None:
        self.lon_jerk_cost = 0.
      if self.lon_collision_cost is None:
        self.lon_collision_cost = 0.
      if self.lat_offset_cost is None:
        self.lat_offset_cost = 0.
      if self.centripental_acc_cost is None:
        self.centripental_acc_cost = 0.
      if self.lat_comfort_cost is None:
        self.lat_comfort_cost = 0.
      if self.constraint_check_failure_count is None:
        self.constraint_check_failure_count = 0.
      if self.collision_failure_count is None:
        self.collision_failure_count = 0.
      if self.distance_planning is None:
        self.distance_planning = 0.
      if self.id_shown is None:
        self.id_shown = 0
      if self.flag_path_time_obstacle_sample_shown is None:
        self.flag_path_time_obstacle_sample_shown = 0
      if self.max_t is None:
        self.max_t = 0.
      if self.max_d is None:
        self.max_d = 0.
      if self.stitch_trajectory_x is None:
        self.stitch_trajectory_x = 0.
      if self.stitch_trajectory_y is None:
        self.stitch_trajectory_y = 0.
      if self.stitch_trajectory_z is None:
        self.stitch_trajectory_z = 0.
      if self.stitch_trajectory_theta is None:
        self.stitch_trajectory_theta = 0.
      if self.stitch_trajectory_kappa is None:
        self.stitch_trajectory_kappa = 0.
      if self.stitch_trajectory_v is None:
        self.stitch_trajectory_v = 0.
      if self.stitch_trajectory_a is None:
        self.stitch_trajectory_a = 0.
      if self.stitch_trajectory_relative_time is None:
        self.stitch_trajectory_relative_time = 0.
      if self.stitch_debug is None:
        self.stitch_debug = planning_msgs.msg.StitchDebug()
      if self.decision_debug is None:
        self.decision_debug = planning_msgs.msg.DecisionDebug()
    else:
      self.lon_objective_cost = 0.
      self.lon_jerk_cost = 0.
      self.lon_collision_cost = 0.
      self.lat_offset_cost = 0.
      self.centripental_acc_cost = 0.
      self.lat_comfort_cost = 0.
      self.constraint_check_failure_count = 0.
      self.collision_failure_count = 0.
      self.distance_planning = 0.
      self.id_shown = 0
      self.flag_path_time_obstacle_sample_shown = 0
      self.max_t = 0.
      self.max_d = 0.
      self.stitch_trajectory_x = 0.
      self.stitch_trajectory_y = 0.
      self.stitch_trajectory_z = 0.
      self.stitch_trajectory_theta = 0.
      self.stitch_trajectory_kappa = 0.
      self.stitch_trajectory_v = 0.
      self.stitch_trajectory_a = 0.
      self.stitch_trajectory_relative_time = 0.
      self.stitch_debug = planning_msgs.msg.StitchDebug()
      self.decision_debug = planning_msgs.msg.DecisionDebug()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f2I10f6B2f().pack(_x.lon_objective_cost, _x.lon_jerk_cost, _x.lon_collision_cost, _x.lat_offset_cost, _x.centripental_acc_cost, _x.lat_comfort_cost, _x.constraint_check_failure_count, _x.collision_failure_count, _x.distance_planning, _x.id_shown, _x.flag_path_time_obstacle_sample_shown, _x.max_t, _x.max_d, _x.stitch_trajectory_x, _x.stitch_trajectory_y, _x.stitch_trajectory_z, _x.stitch_trajectory_theta, _x.stitch_trajectory_kappa, _x.stitch_trajectory_v, _x.stitch_trajectory_a, _x.stitch_trajectory_relative_time, _x.stitch_debug.prev_traj_is_not_ok, _x.stitch_debug.driver_mode_is_not_auto, _x.stitch_debug.prev_traj_size_is_zero, _x.stitch_debug.smaller_than_prev_traj_time, _x.stitch_debug.beyond_prev_traj_time, _x.stitch_debug.dist_too_large, _x.stitch_debug.lon_diff, _x.stitch_debug.lat_diff))
      for val1 in self.decision_debug.obstacle:
        _x = val1
        buff.write(_get_struct_b6fb3fb().pack(_x.id, _x.s, _x.l, _x.vs, _x.as_, _x.vl, _x.al, _x.lane_no, _x.time_cost, _x.des_cost, _x.decision_cost, _x.decision_tag))
      _x = self
      buff.write(_get_struct_2b().pack(_x.decision_debug.lanechange_id, _x.decision_debug.lane_id))
      buff.write(_get_struct_3f().pack(*self.decision_debug.ego_cost))
      buff.write(_get_struct_3b().pack(*self.decision_debug.onlane_obs_num))
      buff.write(_get_struct_b().pack(self.decision_debug.lanechange_process))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stitch_debug is None:
        self.stitch_debug = planning_msgs.msg.StitchDebug()
      if self.decision_debug is None:
        self.decision_debug = planning_msgs.msg.DecisionDebug()
      end = 0
      _x = self
      start = end
      end += 98
      (_x.lon_objective_cost, _x.lon_jerk_cost, _x.lon_collision_cost, _x.lat_offset_cost, _x.centripental_acc_cost, _x.lat_comfort_cost, _x.constraint_check_failure_count, _x.collision_failure_count, _x.distance_planning, _x.id_shown, _x.flag_path_time_obstacle_sample_shown, _x.max_t, _x.max_d, _x.stitch_trajectory_x, _x.stitch_trajectory_y, _x.stitch_trajectory_z, _x.stitch_trajectory_theta, _x.stitch_trajectory_kappa, _x.stitch_trajectory_v, _x.stitch_trajectory_a, _x.stitch_trajectory_relative_time, _x.stitch_debug.prev_traj_is_not_ok, _x.stitch_debug.driver_mode_is_not_auto, _x.stitch_debug.prev_traj_size_is_zero, _x.stitch_debug.smaller_than_prev_traj_time, _x.stitch_debug.beyond_prev_traj_time, _x.stitch_debug.dist_too_large, _x.stitch_debug.lon_diff, _x.stitch_debug.lat_diff,) = _get_struct_9f2I10f6B2f().unpack(str[start:end])
      self.stitch_debug.prev_traj_is_not_ok = bool(self.stitch_debug.prev_traj_is_not_ok)
      self.stitch_debug.driver_mode_is_not_auto = bool(self.stitch_debug.driver_mode_is_not_auto)
      self.stitch_debug.prev_traj_size_is_zero = bool(self.stitch_debug.prev_traj_size_is_zero)
      self.stitch_debug.smaller_than_prev_traj_time = bool(self.stitch_debug.smaller_than_prev_traj_time)
      self.stitch_debug.beyond_prev_traj_time = bool(self.stitch_debug.beyond_prev_traj_time)
      self.stitch_debug.dist_too_large = bool(self.stitch_debug.dist_too_large)
      self.decision_debug.obstacle = []
      for i in range(0, 50):
        val1 = planning_msgs.msg.ObstacleIn()
        _x = val1
        start = end
        end += 39
        (_x.id, _x.s, _x.l, _x.vs, _x.as_, _x.vl, _x.al, _x.lane_no, _x.time_cost, _x.des_cost, _x.decision_cost, _x.decision_tag,) = _get_struct_b6fb3fb().unpack(str[start:end])
        self.decision_debug.obstacle.append(val1)
      _x = self
      start = end
      end += 2
      (_x.decision_debug.lanechange_id, _x.decision_debug.lane_id,) = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 12
      self.decision_debug.ego_cost = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 3
      self.decision_debug.onlane_obs_num = _get_struct_3b().unpack(str[start:end])
      start = end
      end += 1
      (self.decision_debug.lanechange_process,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f2I10f6B2f().pack(_x.lon_objective_cost, _x.lon_jerk_cost, _x.lon_collision_cost, _x.lat_offset_cost, _x.centripental_acc_cost, _x.lat_comfort_cost, _x.constraint_check_failure_count, _x.collision_failure_count, _x.distance_planning, _x.id_shown, _x.flag_path_time_obstacle_sample_shown, _x.max_t, _x.max_d, _x.stitch_trajectory_x, _x.stitch_trajectory_y, _x.stitch_trajectory_z, _x.stitch_trajectory_theta, _x.stitch_trajectory_kappa, _x.stitch_trajectory_v, _x.stitch_trajectory_a, _x.stitch_trajectory_relative_time, _x.stitch_debug.prev_traj_is_not_ok, _x.stitch_debug.driver_mode_is_not_auto, _x.stitch_debug.prev_traj_size_is_zero, _x.stitch_debug.smaller_than_prev_traj_time, _x.stitch_debug.beyond_prev_traj_time, _x.stitch_debug.dist_too_large, _x.stitch_debug.lon_diff, _x.stitch_debug.lat_diff))
      for val1 in self.decision_debug.obstacle:
        _x = val1
        buff.write(_get_struct_b6fb3fb().pack(_x.id, _x.s, _x.l, _x.vs, _x.as_, _x.vl, _x.al, _x.lane_no, _x.time_cost, _x.des_cost, _x.decision_cost, _x.decision_tag))
      _x = self
      buff.write(_get_struct_2b().pack(_x.decision_debug.lanechange_id, _x.decision_debug.lane_id))
      buff.write(self.decision_debug.ego_cost.tostring())
      buff.write(self.decision_debug.onlane_obs_num.tostring())
      buff.write(_get_struct_b().pack(self.decision_debug.lanechange_process))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stitch_debug is None:
        self.stitch_debug = planning_msgs.msg.StitchDebug()
      if self.decision_debug is None:
        self.decision_debug = planning_msgs.msg.DecisionDebug()
      end = 0
      _x = self
      start = end
      end += 98
      (_x.lon_objective_cost, _x.lon_jerk_cost, _x.lon_collision_cost, _x.lat_offset_cost, _x.centripental_acc_cost, _x.lat_comfort_cost, _x.constraint_check_failure_count, _x.collision_failure_count, _x.distance_planning, _x.id_shown, _x.flag_path_time_obstacle_sample_shown, _x.max_t, _x.max_d, _x.stitch_trajectory_x, _x.stitch_trajectory_y, _x.stitch_trajectory_z, _x.stitch_trajectory_theta, _x.stitch_trajectory_kappa, _x.stitch_trajectory_v, _x.stitch_trajectory_a, _x.stitch_trajectory_relative_time, _x.stitch_debug.prev_traj_is_not_ok, _x.stitch_debug.driver_mode_is_not_auto, _x.stitch_debug.prev_traj_size_is_zero, _x.stitch_debug.smaller_than_prev_traj_time, _x.stitch_debug.beyond_prev_traj_time, _x.stitch_debug.dist_too_large, _x.stitch_debug.lon_diff, _x.stitch_debug.lat_diff,) = _get_struct_9f2I10f6B2f().unpack(str[start:end])
      self.stitch_debug.prev_traj_is_not_ok = bool(self.stitch_debug.prev_traj_is_not_ok)
      self.stitch_debug.driver_mode_is_not_auto = bool(self.stitch_debug.driver_mode_is_not_auto)
      self.stitch_debug.prev_traj_size_is_zero = bool(self.stitch_debug.prev_traj_size_is_zero)
      self.stitch_debug.smaller_than_prev_traj_time = bool(self.stitch_debug.smaller_than_prev_traj_time)
      self.stitch_debug.beyond_prev_traj_time = bool(self.stitch_debug.beyond_prev_traj_time)
      self.stitch_debug.dist_too_large = bool(self.stitch_debug.dist_too_large)
      self.decision_debug.obstacle = []
      for i in range(0, 50):
        val1 = planning_msgs.msg.ObstacleIn()
        _x = val1
        start = end
        end += 39
        (_x.id, _x.s, _x.l, _x.vs, _x.as_, _x.vl, _x.al, _x.lane_no, _x.time_cost, _x.des_cost, _x.decision_cost, _x.decision_tag,) = _get_struct_b6fb3fb().unpack(str[start:end])
        self.decision_debug.obstacle.append(val1)
      _x = self
      start = end
      end += 2
      (_x.decision_debug.lanechange_id, _x.decision_debug.lane_id,) = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 12
      self.decision_debug.ego_cost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 3
      self.decision_debug.onlane_obs_num = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=3)
      start = end
      end += 1
      (self.decision_debug.lanechange_process,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_b6fb3fb = None
def _get_struct_b6fb3fb():
    global _struct_b6fb3fb
    if _struct_b6fb3fb is None:
        _struct_b6fb3fb = struct.Struct("<b6fb3fb")
    return _struct_b6fb3fb
_struct_3b = None
def _get_struct_3b():
    global _struct_3b
    if _struct_3b is None:
        _struct_3b = struct.Struct("<3b")
    return _struct_3b
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_9f2I10f6B2f = None
def _get_struct_9f2I10f6B2f():
    global _struct_9f2I10f6B2f
    if _struct_9f2I10f6B2f is None:
        _struct_9f2I10f6B2f = struct.Struct("<9f2I10f6B2f")
    return _struct_9f2I10f6B2f
